: hi ( w -- b ) 8 rshift $ff and ;
: lo ( w -- b )          $ff and ;

\ Gets the cell at some fixed ZP offset and overwrites TOS with it.
\ DOES NOT move PSP; it overwrites the current TOS.
\ Clobbers Y.
: (zp)>tos, ( zp-addr -- )
    1      #      ldy,
    dup    (zp),y lda,
    1      zp,x   sta,
    ( zp ) $      lda,
    0      zp,x   sta, ;

\ Writes TOS to (ZP) at some fixed offset.
\ DOES NOT move PSP.
\ Clobbers Y.
: tos>(zp), ( zp-addr -- )
    1      #      ldy,
    1      zp,x   lda,
    dup    (zp),y sta,
    0      zp,x   lda,
    ( zp ) $      sta, ;

: R>,
    dex, dex,
    pla,   0 zp,x sta,
    pla,   1 zp,x sta, ;

: >R,
    1 zp,x lda,   pha,
    0 zp,x lda,   pha,
    inx, inx, ;

: R>W,
    pla,   wl zp sta,
    pla,   wh zp sta, ;

: W>R,
    wh zp lda,   pha,
    wl zp lda,   pha, ;

\ Copies a fixed ZP cell into TOS. DOES NOT move PSP.
: ZP>tos, ( zp-addr -- )
    dup 1+ zp   lda,
    1      zp,x sta,
    ( zp ) zp   lda,
    0      zp,x sta, ;

\ Copies TOS into a fixed ZP cell. DOES NOT move PSP.
: tos>ZP, ( zp-addr -- )
    1      zp,x  lda,
    dup 1+ zp    sta,
    0      zp,x  lda,
    ( zp ) zp    sta, ;

: ZP+, ( lit zp-addr -- )
    clc,
    dup     zp lda,
    swap ( zp-addr lit ) #  adc,
    dup                  zp sta,

    1+ dup   zp lda,
    0        #  adc,
    ( zp+1 ) zp sta, ;

\ Copies a word on the stack to another location, overwriting it.
\ Give the indexes of the low bites; eg. NIP does 0 2 stack-cp, to copy
\ TOS over NOS.
: stack-cp, ( from to -- )
    over    zp,x lda,
    dup     zp,x sta,
    swap 1+ zp,x lda,
         1+ zp,x sta, ;

\ **Swaps** the bytes at these two stack indices.
: b-swap, ( a b -- )
    over zp,x ldy,
    dup  zp,x lda,
         zp,x sty,
         zp,x sta, ;

\ **Swaps** the words at these two stack indices.
: w-swap, ( a b -- )
    2dup b-swap,
    1+ >R 1+ R> b-swap, ;

\ Juggles the hardware S pointer into Y, preserving X in W_lo.
\ Clobbers A, Y, W_lo!
: rsp>Y, ( -- )
  wl zp stx,
  tsx, txa, tay,
  wl zp ldx, ;

\ Compiles code that will push a literal value.
: lit, ( value -- )
  dex, dex,        \ 2B 4c
  dup hi # lda,    \ 2B 2c
  1 zp,x   sta,    \ 2B 4c
  lo     # lda,    \ 2B 2c
  0 zp,x   sta, ;  \ 2B 4x  = 10B 16c

\ Compiles code that adds a literal to TOS.
: TOS+lit, ( value -- )
  dup lo #    lda,
  clc,
  0      zp,x adc,
  0      zp,x sta,
  1      zp,x lda,
      hi #    adc,
  1      zp,x sta, ;

