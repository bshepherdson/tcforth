target definitions

VARIABLE DISK
8 disk !

VARIABLE FREE-FILES
$7ffc free-files !

: CLAIM-FILE ( fnum --) 1 swap lshift invert   free-files @ and free-files ! ;
: FREE-FILE  ( fnum --) 1 swap lshift          free-files @ or  free-files ! ;

: FIND-FILE-SLOT ( -- fnum|0 )
  15 2 DO 1 i lshift free-files @ and IF
    i dup claim-file UNLOOP EXIT THEN LOOP 0 ;


: R/O 1 ;
: R/W abort ;
: W/O abort ;
: BIN ;


: OPEN-FILE ( c-addr u fam -- fnum ior )
  drop setnam ( )
  find-file-slot dup
  disk @ setlfs open   0 ;

\ CLOSE-FILE is defined in machine code.
\ READ-LINE  is defined in machine code.

\ TODO: Reading larger chunks of files - entire blocks?
\ TODO: Writing to files, if needed.

-2 CONSTANT SRC-FILE

\ File numbers 2 to 14 are available, so here's 12 bytes.
\ The records are in INCLUDE stack order, oldest to newest, and each byte holds
\ the corresponding logical file number.
CREATE FILES 12 allot
VARIABLE >FILE
host T' FILES t>body 1- target >FILE !

\ Lines from files are read to $c000 + 256*(fnum-2) so they don't overlap.
\ $c000 is 4K = 16 files.

\ REFILL for files - read a line from the topmost file; or return 0 on EOF.
:noname ( -- ? )
  \ >FILE is a variable containing the address of a byte holding the topmost
  \ logical file number.
  >FILE @ c@
  dup 2 - pages $c000 or   dup >R   256 rot ( c-addr u fnum  R: dst )
  read-line ( len more? ior ) IF err-file-i/o throw THEN ( len more? )
  IF ( len ) 0 >IN !   R> swap 'source 2!   true
  ELSE
    R> 2drop ( )
    >file @ c@ close-file IF err-file-i/o throw THEN
    -1 >file +!   false THEN ;
  src-file refiller !

: INCLUDED ( i*x c-addr u -- j*x )
  r/o open-file IF err-no-such-file throw THEN
  \ Advance the >file pointer
  1 >file +!   >file @ c! \ Write the file number into the stack of files.
  src-file (evalmany) ;

: INCLUDE ( i*x "file" -- j*x ) parse-name included ;
