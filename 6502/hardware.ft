\ Wrappers for KERNAL routines on the C64.
host definitions

$ffbd CONSTANT k-setnam
$ffba CONSTANT k-setlfs
$ffd5 CONSTANT k-load
$ffc0 CONSTANT k-open
$ffc6 CONSTANT k-chkin
$ffb7 CONSTANT k-readst
$ffcf CONSTANT k-chrin
$ffc3 CONSTANT k-close
$ffcc CONSTANT k-clrchn

code SETNAM ( c-addr u -- )
  \ SETNAM kernal routine expects A=len, Y:X=address
  wl  tos>ZP,   inx, inx,
  w2l tos>ZP,   inx, inx,
  txa, pha,
  w2l zp ldx,
  w2h zp ldy,
  wl  zp lda,
  k-setnam $ jsr,
  pla, tax,
end-code

code SETLFS ( logical-file-number disk -- )
  \ SETLFS kernal routine expects A=file number, X=device number, Y=secondary
  \ which is the same as the file number.
  2  zp,x lda, tay, \ Logical file -> Y
  0  zp,x lda,
  wl zp   sta,      \ disk number -> Wlo
  txa,
  clc,
  4  # adc,
  pha,
  wl zp ldx,        \ disk number -> X
  tya,              \ Logical file -> Y, A
  k-setlfs $ jsr,
  pla, tax,
end-code

code OPEN ( -- )
  txa, pha,
  k-open $ jsr, \ C set if disk error
  cs? if,
    jam, \ TODO: Better error handling.
  then,
  pla, tax,
end-code

code CLOSE-FILE ( logical-file-number -- ior )
  txa, pha,
  0 zp,x lda,
  k-close  $ jsr,
  k-clrchn $ jsr,
  pla, tax,
  0 # lda,
  0 zp,x sta,
  1 zp,x sta,
end-code

\ Note that the returned u2 does not include the terminators.
\ 0-length lines are common in real files, and are returned by this word
\ without error.
\ TODO: A file that ends with a nonempty line but has no newline never shows
\ as EOF - it always claims one byte was read. Minor issue, but needs resolving
\ eventually.

\ Subtract the final dest from the original dest to get the length.
\ Y=0 if we found a newline, and Y=1 if we found a full EOF.
label READ-LINE-cr
  $ff # ldy,    \ Found an actual CR
  k-readst $ jsr, \ Read status byte
  ne? if,
    0 # ldy,
  then,
label READ-LINE-done
  k-clrchn $ jsr, \ Clear the I/O channels; this preserves Y.
  pla, tax,       \ Bring back the Forth stack.
  sec,
  w3l zp   lda,
  4   zp,x sbc,
  4   zp,x sta,
  w3h zp   lda,
  5   zp,x sbc,
  5   zp,x sta, \ length read -> u2

  \ If we found a real CR/LF, this is a blank line and Y=$ff.
  \ The other possibility is we got here via the EOF flag, if there's no CRLF
  \ at the end of the file.
  4   zp,x lda,
  5   zp,x ora,
  ne? if,
    $ff # ldy,  \ If we read anything, set Y to $ff.
  then,

  \ Y=00: EOF flag and nothing read; or
  \ Y=ff: Nonzero read, or found a newline.
  2   zp,x sty,
  3   zp,x sty, \ more? flag
  0   #    lda,
  0   zp,x sta,
  1   zp,x sta, \ 0 -> ior, no error
  rts,

label READ-LINE-loop
  k-readst $ jsr,   \ Read status byte
  ne? if,           \ EOF or read error
    $40 # and,
    ne? if,         \ EOF
      READ-LINE-done $ jmp,
    then,

    \ Not EOF, therefore an error. Returns 0 0 1 for now.
    \ TODO: Read the drive error channel for real details.
    0 # lda,
    1 zp,x sta,
    2 zp,x sta,   3 zp,x sta,
    4 zp,x sta,   5 zp,x sta,
    1 #    lda,
    0 zp,x sta,
    rts,
  then,

  \ Ready to read: call CHRIN to get a byte.
  k-chrin $ jsr,     \ b -> A
  w3l    (zp),y sta, \ -> (W3)

  \ Check if the read byte was a line terminator.
  \ It's still in A.
  $0d # cmp,
  READ-LINE-cr beq,
  $0a # cmp,
  READ-LINE-cr beq,

  w3l zp     inc,
  eq? if,   w3h zp inc,   then,

  \ If not, keep looping.
  READ-LINE-loop $ jmp,
  \ Never reaches here - the exit conditions are inside the loop.

code READ-LINE ( c-addr u1 logical-file-number -- u2 flag ior )
  0 zp,x lda,   wl  zp sta, \ fnum -> Wlo
  2 zp,x lda,   w2l zp sta,
  3 zp,x lda,   w2h zp sta, \ len -> W2
  4 zp,x lda,   w3l zp sta,
  5 zp,x lda,   w3h zp sta, \ dst -> W3
  txa, pha,

  \ Call CHKIN to make sure we're talking to the right device.
  wl zp ldx,
  k-chkin $ jsr,

  0 # ldy, \ READST and CHRIN preserve Y, for exactly this reason.
  READ-LINE-loop beq,
  jam,
end-code-bare

