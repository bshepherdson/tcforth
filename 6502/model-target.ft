\ Target words to get metacompiled, that hide the details of the machine and the
\ Forth model (eg. ITC vs. DTC vs. STC)
\ This file: STC on 6502 for Commodore-64.

\ ,DOCOL is already defined.
target definitions

\ JSR $1234 is   $20 $34 $12
target : !CF ( codeword-addr xt -- ) $20 over c!   char+ ! ;

\ Add ,CF which expects the address of the codeword on the stack.
\ For STC this is compile, it must JSR $abs to the codeword.
target : ,CF ( codeword-addr -- ) compile, ;

\ Write the code field for a colon definition.
\ In STC this is empty, so this word is a no-op.
target : ,DOCOL ( -- ) ;

\ Writes code such that this literal will be pushed during execution.
\ There's a portable version for threaded code.
target : LITERAL ( C: x --    X: -- x )
    \ DEX DEX     = $caca
    [ host $caca tliteral target ] ,
    bytes  ( x_lo x_hi )
    \ LDA hi      = a9 __
    [ host $a9   tliteral target ] c, c, ( lo )
    \ STA 01,x    = 95 01
    [ host $0195 tliteral target ] ,
    \ LDA lo      = a9 __
    [ host $a9   tliteral target ] c, c,
    \ STA 00,x    = 95 00
    [ host $0095 tliteral target ] , ; IMMEDIATE
  host acts: tliteral ; IMPERATIVE

\ NOTE: This is per-thread, too!
\ TODO: Figure out a more coherent memory map - where should I put the PAD?
target : PAD ( -- addr ) $7800 ;

host REQUIRE ../shared/model-target.ft

\ For STC, this is an IMMEDIATE word that compiles an RTS.
\ PORT: STC only, and the code compiled is machine-specific.
target : EXIT [ host $60 tliteral target ] c, ; IMMEDIATE
  host acts: $60 tcode-c, ; IMPERATIVE

\ DOES> ======================================================================
\ Implementing sequence 2
\ (DOES>) runs in eg. CONSTANT to properly compile a particular constant.
\ Inside target (DOES>), TORS points at the RTS at the end of CONSTANT.
\ Just after it is the dodoes-code that should become the new codeword.

\ Note that the value from the return stack needs 2+ because the return
\ address on the stack is actually the byte *before* the next instruction,
\ ie. just before the RTS. We want it to point just after it, hence the 2+.
\ Similarly, >CFA returns the address of the JSR opcode; 1+ that to get the
\ destination address that needs overwriting.


\ Runs during compilation TARGET : DOES> - compile code into its thread!
host definitions

\ Compiles code that will itself compile an exit.
\ Runs while assembling ; for example.
: EXIT-compile, ( -- )
  \ RTS is $60
  $60 tliteral  [T'] c, tcompile, ;

\ Runs during compilation TARGET : DOES> - compile code into its thread!
code-space @
pfa->tos,
code-space @
CONSTANT pfa-tos-code-top
CONSTANT pfa-tos-code

: TDOES,
  [T'] (DOES>) tliteral  [T'] compile, tcompile,
  EXIT-compile,
  \ Now the dodoes-code. For STC this receives the parameter field address
  \ on the return (hardware) stack. Shift this to the data stack.
  \ However, the return address is actually 1 byte before the next opcode, so
  \ it must be incremented as it goes onto the data stack.
  \ This is the action of pfa->tos, which we have a copy of handy.
  pfa-tos-code-top pfa-tos-code DO
    i 1+   pfa-tos-code-top U< IF \ Room to do a word at once.
      i tcode@ tliteral   [T'] , tcompile,
    ELSE \ Just one byte at a time.
      i tcode-c@ tliteral   [T'] c, tcompile,
    THEN
  1 tcells +LOOP ;
  \ Which is 13B per word that DOES>, eg. CONSTANT, etc.
  \ It's slower and more complicated to JSR to a routine for this, since it
  \ covers the PFA on the stack.
