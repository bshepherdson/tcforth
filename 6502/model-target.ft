\ Target words to get metacompiled, that hide the details of the machine and the
\ Forth model (eg. ITC vs. DTC vs. STC)
\ This file: STC on 6502 for Commodore-64.

\ ,DOCOL is already defined.
target definitions

\ Add ,CF which expects the address of the codeword on the stack.
\ For STC this is compile, it must JSR $abs to the codeword.
target : ,CF ( codeword-addr -- ) compile, ;

\ Write the code field for a colon definition.
\ In STC this is empty, so this word is a no-op.
target : ,DOCOL ( -- ) ;

host colocated-names? [IF]
  target : ,PFA ( -- ) ;
host [ELSE]
  target : ,PFA ( -- ) here cell+ , ;
host [THEN]

target : ,xt-slot ( -- ) ,pfa ;

\ Writes code such that this literal will be pushed during execution.
target : LITERAL ( C: x --    X: -- x )
    \ DEX DEX     = $caca
    [ host $caca tliteral target ] ,
    bytes  ( x_lo x_hi )
    \ LDA hi      = a9 __
    [ host $a9   tliteral target ] c, c, ( lo )
    \ STA 01,x    = 95 01
    [ host $0195 tliteral target ] ,
    \ LDA lo      = a9 __
    [ host $a9   tliteral target ] c, c,
    \ STA 00,x    = 95 00
    [ host $0095 tliteral target ] , ; IMMEDIATE
  host acts: tliteral ; IMPERATIVE

\ Compiles a string literal into a thread.
\ On STC that means a jump to DOSTRING, the length, then the words.
target : ,DOSTRING ( c-addr u -- )
  [ host (dostring) tliteral target ] compile,   \ Compile the codeword first.
  dup >R c,        \ Then the length
  here R@ move     \ And the text
  R> chars allot ; \ And make room for it.

\ For STC, this is an IMMEDIATE word that compiles an RTS.
target : EXIT [ host $60 tliteral target ] c, ; IMMEDIATE
  host acts: $60 tcode-c, ; IMPERATIVE

\ No alignment on 6502.
target : ALIGNED ; host acts: ;
target : ALIGN ; host acts: ;

target : NAME>STRING ( nt -- c-addr u )
  cell+ dup char+ swap c@ [ host mask_len tliteral target ] and ;

\ This is actually portable but since it fits right here between ALIGNED and
\ (DOES>), there's no good place to put it with splitting this file into 3.
target : >CFA ( nt -- xt )
  name>string + aligned
  [ host config mix-code-and-name? @ 0= [IF] target ] @ [ host [THEN] target ] ;

host config mix-code-and-name? @ [IF]
target : /NAME-FIELD ( -- u ) 0 ;
host [ELSE]
target : /NAME-FIELD ( -- u ) 1 cells ;
host [THEN]

host config mix-code-and-data? @ [IF]
target : >BODY ( xt -- addr ) 3 + ;
host [ELSE]
target : >BODY ( xt -- addr ) 3 + @ ;
host [THEN]


\ TODO: Figure out a more coherent memory map - where should I put the PAD?
target : PAD ( -- addr ) $7800 ;

\ DOES> ======================================================================
\ Implementing sequence 2
\ (DOES>) runs in eg. CONSTANT to properly compile a particular constant.
\ Inside target (DOES>), TORS points at the RTS at the end of CONSTANT.
\ Just after it is the dodoes-code that should become the new codeword.

\ Note that the value from the return stack needs 2+ because the return
\ address on the stack is actually the byte *before* the next instruction,
\ ie. just before the RTS. We want it to point just after it, hence the 2+.
\ Similarly, >CFA returns the address of the JSR opcode; 1+ that to get the
\ destination address that needs overwriting.
target : (DOES>) R@ cell+   latest >cfa 1+   ! ;

host T' (DOES>) '(DOES>) !

\ Runs during compilation TARGET : DOES> - compile code into its thread!
host definitions

\ Moves THERE back by u and pushes the most recently compiled words onto the
\ stack (low address first).
: asm-lit ( u -- w ... )
  dup negate tcode-allot   0 DO code-there @ i + tcode@ LOOP ;

\ Compiles code that will itself compile an exit.
\ Runs while assembling ; for example.
: EXIT-compile, ( -- )
  \ RTS is $60
  $60 tliteral  [T'] c, tcompile, ;

\ Runs during compilation TARGET : DOES> - compile code into its thread!

code-there @
pfa->tos,
code-there @
CONSTANT pfa-tos-code-top
CONSTANT pfa-tos-code


: TDOES,
  [T'] (DOES>) tliteral  [T'] compile, tcompile,
  EXIT-compile,
  \ Now the dodoes-code. For STC this receives the parameter field address
  \ on the return (hardware) stack. Shift this to the data stack.
  \ However, the return address is actually 1 byte before the next opcode, so
  \ it must be incremented as it goes onto the data stack.
  \ This is the action of pfa->tos, which we have a copy of handy.
  pfa-tos-code-top pfa-tos-code DO
    i 1+   pfa-tos-code-top U< IF \ Room to do a word at once.
      i tcode@ tliteral   [T'] , tcompile,
    ELSE \ Just one byte at a time.
      i tcode-c@ tliteral   [T'] c, tcompile,
    THEN
  1 tcells +LOOP ;
  \ Which is 13B per word that DOES>, eg. CONSTANT, etc.
  \ It's slower and more complicated to JSR to a routine for this, since it
  \ covers the PFA on the stack.

\ Early library code =========================================================
\ A few Forth implementations of core words that aren't worth the space on a
\ small machine.
target definitions
target : 2@ ( addr -- [addr+2] [addr] ) dup cell+ @   swap @ ;
target : 2! ( [addr+2] [addr] addr -- ) swap over ! cell+ ! ;
target : negate invert 1+ ;

target : D>S drop ;
target : UDM* ( l1 h1 u2 -- l3=l1*u2_lo h3=l1*u2_hi_+_h1*u2_lo )
  tuck UM* D>S >R ( l1 u2             R: h1*u2_lo )
  UM*             ( l1*u2_lo l1*u2_hi R: h1*u2_lo )
  R> + ;

\ TODO: Implement debugging helpers.
