\ The Forth system is compiled into a PRG disk file, which gets loaded at
\ the ORIGIN ($0800) at startup.

\ The original, standalone c64th I wrote used DTC with the system stack as
\ the data stack.
\ That's bulky and slow - so I'm rebuilding it to use STC, with the data stack
\ in the zero page. (It's hard to "pick" nearby values on the system stack, but
\ easy with zp,x and zp,y indexed reads.

\ Forth registers:
\ - W in zero page
\ - IP doesn't exist - using the system stack and PC.
\ - RSP is S, the system stack.
\ - Data stack is $02-$7f in the zero page; PSP is X.
\   - Both X and Y can be used for absolute indexing, and $02,x ZP indexing.
\   - The difference lies in ($02,x) vs. ($02),y indirect indexing.
\   - It's useful for reading 16-bit quantities to put the address in W and do:
\     LDY #$01;  LDA (w),Y   to read the high byte.

\ Machine registers:
\ - A is always free.
\ - X always holds the PSP.
\ - Y is free.
\ - S is RSP; other things can be pushed there temporarily if necessary.

\ Note that DOCOL and NEXT don't exist for an STC Forth.
\ High-level threads end with RTS instructions.

\ EXIT is usually achieved by an RTS at the end of a thread. If EXIT is called
\ explicitly, it can be implemented with R>, or it can compile an RTS.

host definitions

\ Basic dictionary constants
$80 CONSTANT f_immed
$40 CONSTANT f_hidden
$7f CONSTANT mask_len_hidden
$3f CONSTANT mask_len

\ Other constants
$0080 CONSTANT sp0
$ff   CONSTANT rp0
\ System stack (used for RSP) is empty-descending, so $FF is an empty stack.

there CONSTANT DP
: here dp @ ;
$2000 dp !

: t,     ( w -- )   asm,16 ;
: tc,    ( b -- )   asm, ;
: t@     ( a -- w ) dup 1+ tc@ 8 lshift swap   tc@ or ;
: t!     ( w a -- ) 2dup tc!   >R 8 rshift R>   1+ tc! ;


\ Assembler macros
\ These are "personal", ie. they're used by the model and kernel for this machine, not in the
\ shared code.
: next, ( -- ) rts, ; \ STC NEXT is actually return from subroutine.

: tchars ;
: tchar+ 1+ ;
: tcells 2* ;
: tcell+ 2 + ;

\ This is tricky! Compiling a literal value is definitely not the same as compiling a call!
\ The xt is the code address for the word, so we compile a JSR $xxxx to it.
: tcompile,  ( xt -- ) $ jsr, ;
: tdecompile ( slot -- xt ) 1+ t@ ;

\ No alignment on 6502.
: taligned  ( x -- x2 ) ;
: talign    ( -- )      ;

16 CONSTANT tcellbits \ 16 bits per cell
 8 CONSTANT tbits     \ 8 bits per address unit

VARIABLE 'latest
: LATEST ( -- nt ) 'latest @ ;
0 'latest !


\ Start of assembly ==========================================================
origin there !

\ To make the machine code Forth system callable from the startup BASIC CLI,
\ we need a fragment of BASIC code that calls into the machine code:
\ 10 SYS 2064
\ That compiles to:
$080c t,   \ 0801: 0c 08           Pointer to the next line of BASIC code.
$000a t,   \ 0803: 0a 00           Line number (10)
$9e   tc,  \ 0805: 9e              Bytecode for SYS command
$20   tc,  \ 0806: 20 32 30 36 34  " 2064"
$32   tc,
$30   tc,
$36   tc,
$34   tc,
$00   tc,  \ 080b: 00              NUL terminator
$0000 t,   \ 080c: 00 00           Pointer to the next line, $0000 = end

\ Then the machine code begins at $0810 = 2064.
$0810 there !

\ Assemble a dummy JMP $0000 here; it'll get overwritten with a JMP main at
\ the bottom of kernel.ft
$0000 $ jmp,


\ Codewords ==================================================================
\ This is the default codeword for CREATEd words.
\ A thread called the variable, which begins with `JSR DOVAR` then the
\ parameter field. So the variable's codeword calls here, and the "return
\ address" it pushed is the parameter field. Actually the PFA-1 because of how
\ return addresses work on the 6502.
\ So pop it from the return stack, add 1, and push it onto the data stack.
\ Then the RTS at the end will return to the thread.
label DOVAR
    dex, dex,
    pla,        \ lo -> A
    clc,
    1 # adc,    \ A+1 -> A
    0 zp,x sta, \ -> TOS_lo
    pla,        \ hi -> A
    0 # adc,
    1 zp,x sta,
    rts, \ Actually returning to the calling thread.

\ Expects a byte with the length, then that many characters.
\ Uses w2l to hold the length temporarily.
\ Note that the return address from the stack is 1 byte too early!
\ However after *char has been adjusted by len, it's 1 byte too far for
\ an RTS. However JMP (W) will work perfectly.
label (DOSTRING)
    R>W,               \ *len-1 -> W
    1   #      ldy,
    wl  (zp),y lda,    \ len    -> A
    w2l zp     sta,    \ len    -> W2_lo
    2 wl ZP+,          \ *char  -> W   (+1 to skip the length, +1 because it was *len-1)

    dex, dex,
    wl ZP>tos,         \ Push *char
    dex, dex,

    0 # lda,           \ Push len
    1 zp,x sta,        \ High byte is 0
    w2l zp lda,
    0 zp,x sta,        \ Low byte from w2l.

    \ The length is in A, and we have to increase W (which points at the first char) by that much.
    clc,
    wl zp adc,       \ len + wl -> A
    wl zp sta,       \ len + wl -> wl
    0 # lda,
    wh zp adc,
    wh zp sta,       \ *char + len is a proper address, 1 byte too far for the
    wl $ (jmp),      \ quirky RTS. But it's perfect for JMP (indirect)!



\ DOES> ======================================================================
\ This is different from the original TC-Forth DODOES scheme.
\ Sequence 1: while eg. : CONSTANT create , DOES> @ ; is being defined.
\ Sequence 2: while CONSTANT is running, defining a new constant.
\ Sequence 3: while a particular constant is executing.

\ DOES> is an immediate word, it runs during "Sequence 1".
\ It compiles   (DOES>) EXIT dodoes-code   at the end of CONSTANT.
\ Then the Forth code after DOES> is compiled. The final CONSTANT looks like:
\ link | len | CONSTANT | docol | CREATE | , | (DOES>) | EXIT |
\     dodoes-code... | @ | EXIT

\ Sequence 2 (eg. 7 CONSTANT FOO) CREATEs the new header with the default
\ DOVAR as its code word, but then (DOES>) runs and patches it to be the address
\ of dodoes-code above, ie. after the EXIT:
\ link | len | FOO | &dodoes-code | 7

\ Sequence 3 (eg. FOO) is straightforward in STC.
\ FOO's codeword is a jump to the dodoes-code. That leaves the parameter field
\ address (address of the 7) on the hardware stack.
\ dodoes-code pops that and pushes it on the data stack instead.
\ Then execution continues into the code after DOES> (eg. @).
\ That will have an RTS at the end from the Sequence 1 compilation, which
\ returns to the caller of FOO. Beautiful.

\ This gets populated later; we can't defined it right now.
VARIABLE '(DOES>)

: EXIT, ( -- ) rts, ;

: DOES, ( -- 'dodoes-code )
    \ Sequence 1 - compiling things into CONSTANT.
    '(DOES>) @ tcompile,   rts,
    here

    \ Sequence 3 - parameter field address on hardware/return stack,
    \ needs to be pushed.
    \ The PC pushed on the 6502 is unfortunately a byte too early, so increment
    \ it as we go.
    dex, dex,
    clc,
    pla,   1 # adc,   0 zp,x sta,
    pla,   0 # adc,   1 zp,x sta,
    \ Now we're set up to continue executing the DOES> code.
;


\ Dictionary Headers =========================================================
\ Compiles the code field for a colon definition - this is blank.
: ,docol ( -- ) ;
\ Compiles the code field for a CREATEd word - JSR DOVAR
: ,dovar ( -- ) dovar tcompile, ;

\ Compiles a string literal into the thread.
\ That's JSR (DOSTRING), then the length byte then the chars.
: ,dostring ( c-addr u -- )
  (dostring) tcompile,
  dup tc,
  ( c-addr u ) BEGIN ?dup WHILE 1- >R   dup c@ tc,   1+ R> REPEAT drop ;

\ Overwrites the codeword of the word at word-xt to point to does-addr.
\ It's currently JSR dovar; we can adjust the address and write the new
\ target address.
: !dodoes ( dodoes-code word-xt -- ) 1+ t! ;

\ Compile a literal. This is in the model because STC handles it differently
\ from DTC etc. There's no need for a LIT jump in general. It can just compile
\ code to push the literal.
\ JSR DOLIT + the word is 10B 16c, plus the overhead of jumping and back.
\ Inlining it is 10B 16c also but without overhead.
: tliteral ( x --   X: -- x )
    dex, dex,
    dup lo #    lda,
    0      zp,x sta,
        hi #    lda,
    1      zp,x sta, \ 10B 16c
;

\ The codeword is 3 bytes wide.
: t>body ( target-xt -- target-body ) 3 + ;

label entry-point 0 asm,16


\ Space for : and ; ==========================================================
\ : :   (CREATE) ,docol smudge ] exit    4 calls and RTS = 13 bytes
: allot-: ( -- ) 13 there +! ;
\ : ;   EXIT-compile, smudge [ exit      2 literals, 3 calls, RTS
\ Literals are DEX DEX LDA lo STA lo LDA hi STA hi = 10 bytes!
\ So 20 for literals, 6 for calls, and RTS = 27 bytes.
: allot-; ( -- ) 27 there +! ;


\ Tail calls =================================================================
\ It seems reasonably straightforward, while metacompiling 6502 STC
\ definitions, to replace a final JSR some-word; RTS with a tail call:
\ JMP some-word.
\ That's a byte shorter, and substantially faster:
\ JSR + RTS is 6 + 6 = 12c; JMP abs is only 3c.

\ So it's a clear win, if it proves practical to implement without bugs.
\ For simplicity, I won't implement it until after I've got the whole system
\ working and passing tests.
\ Known issues with this plan:
\ - If any branches were intending to land at the end, they'll be misplaced.
\   - Solvable by keeping the RTS in place, even though it's rarely used.
\ - Likewise if the inner word were intending to do return stack magic.
\   - I think only J and RSP@/RSP! do that.
\     - J is fine, it has to be inside a loop so it's not the last call.
\     - Return stack gymnastics are more concerning; they could be checked at
\       compile time? That's somewhat expensive to build into the system...
\       A flag set by COMPILE, I guess, that marks if the last thing compiled
\       was a return stack operator?
\ TODO: Substantial potential optimization - to be investigated!



\ A second look at (in)direct threading on 6502.
\ I wonder how much of the pain in the first attempt at this system came from
\ a poor choice of threading setup. Let's take another look and consider.
\ We have JMP (abs) indirect, 3B 5c. It jumps to the code at the address
\ found at abs - exactly the operation needed for DTC! We JMP (ip) and go!
\ Of course the IP needs to be moved, and we can't move it after we've already
\ jumped to it. (Or can we? Words could begin with moving IP... but that seems
\ tricky on the way in and out?)
\ But if the IP points to this word, rather than the next, it's not bad.
\ NEXT becomes something like (assuming IP is in the zero page)
\ LDA #2       \ 2B  2c
\ CLC          \ 1B  2c
\ ADC IPlo     \ 2B  3c
\ STA IPlo     \ 2B  3c
\ LDA IPhi     \ 2B  3c
\ ADC #0       \ 2B  2c
\ STA IPhi     \ 2B  3c
\ JMP (IPlo)   \ 3B  5c
\ totals:       16B 23c
\ which is too long to be inlined everywhere, so let's add a JMP abs: 3B 3c
\ for totals:   19B 26c

\ In comparison, JSR abs + RTS is 4B 12c. Yeah, that's really hard to beat.

\ How about yet another alternative - token threading? There are absolute
\ indirect addressing modes... hm.
\ Then there's only one byte to read and an adjustment of 1 to IP.
\ Allowing for full 16-bit IP, NEXT means reading the token, indexing into the
\ table, and jumping indirect.
\ There are ~70 primitives, well under 128, so the tokens can be literal offsets
\ into the table!
\ NEXT is: read token at IP, increment IP, jump indirect through the table.
\ LDY (IP)      2B  3c   IP here is a 1-byte offset in the thread.
\ LDY (TPlo),Y  2B  3c   TP is the thread pointer, for the whole thread.
\ INC IP        2B  5c
\ Y now holds the token, which is an offset into the token table.
\ STY TOKENlo   2B  3c   TOKENhi is always $03 or whatever the token page is.
\ JMP (TOKENlo) 3B  5c   Jumps to the address in the correct token table slot.
\ totals:      11B 19c

\ Which if inlined would consume #codewords * 11B = perhaps 800B
\ Jumping to it instead would cost 3B (= 270B) and 3 cycles; probably not worth
\ it for under 600B saved unless memory is very tight?
\ This also shrinks the size of threads a lot, from 3B per call to 1B, usually.
\ Quite an intriguing possibility...

\ One caveat there is a 256-byte limit. But that's not so bad - we could add
\ a primitive that adjusts the TP and IP to the current location.
\ It would also need handling by (0)BRANCH primitives... they should always
\ adjust it, I think. Absolute branch targets, just target -> TP; 0 -> IP.

\ Hopefully any "extra" adjustments can be avoided. A compiler check would be
\ wise. Inlined strings are a non-issue if (DOSTRING) also resets TP and IP.

\ How about DOCOL and EXIT, just to sanity check things?
\ This is direct threading with a separate CALL and DOCOL.
\ So nonprimitives begin with a JSR DOCOL before their thread.
\ It's tempting for the compiler to skip the DOCOL but I'm not sure it's better.

\ CALL expects a word at (TP+IP) which is the address of the new thread.
\ It adds TP+IP, pushes this old value, overwrites TP with the new one, and
\ NEXTs into it.
\ LDA IP    2B  3c
\ CLC       1B  2c
\ ADC TPlo  2B  3c
\ STA TPlo  2B  3c
\ LDA TPhi  2B  3c
\ ADC #0    2B  2c
\ STA TPhi  2B  3c
\ PHA       1B  3c
\ LDA TPlo  2B  3c
\ PHA       1B  3c    This could be optimized if we don't mind a big-endian RS?
\ LDA #0    2B  2c
\ STA IP    2B  3c
\ JMP NEXT  3B  3c    (or inlined to save 3B 3c; can stack them together?)
\ totals   24B 36c

\ DOCOL, if we EXECUTE in to a nonprimitive, needs to push the old TP+IP value
\ and continue from after the DOCOL field itself.
\ So if the code field is JSR DOCOL, the address on the stack is the new TP.
\ LDA IP    2B  3c
\ CLC       1B  2c
\ ADC TPlo  2B  3c
\ STA Wlo   2B  3c
\ LDA TPhi  2B  3c
\ ADC #0    2B  2c
\ STA Wlo   2B  3c
\ PLA       1B  4c  \ new TPlo
\ STA TPlo  2B  3c  \ -> TPlo
\ PLA       1B  4c  \ new TPhi
\ STA TPhi  2B  3c  \ -> TPhi
\ LDA Whi   2B  3c  \ old TPhi
\ PHA       1B  3c  \ -> return stack
\ LDA Wlo   2B  3c  \ old TPlo
\ PHA       1B  3c  \ -> return stack
\ LDA #0    2B  2c
\ STA IP    2B  3c
\ NEXT
\ Totals:  29B 50c  which is a lot but only called if we EXECUTE a nonprimitive.

\ If we EXECUTE a primitive we simply work through its code until NEXT, which
\ will continue from after EXECUTE in the thread.


\ Tangential consideration: no carry on indirect indexed access ==============
\ There's a bug (if that it be) on the 6502 family where an indexed indirect
\ read like abs,x, (zp,x) or (zp),y will not carry between the bytes.
\ This is not a problem for token threading, but it may be for some ops.
\ TODO: Look up all uses of the risky modes to make sure there's no risks.
