\ Reading and writing to memory, including the addressing.
\ Note that in order to interpret packed addresses, the version is needed.
target definitions

\ Byte addresses =============================================================
\ These read from $8000 to $fc00. NB the words are big-endian on disk, so the
\ even byte is the upper one, and the odd one is the low one.
: ba>  ( ba -- c-addr ) 2/ $8000 or ;

: rbba ( ba -- b )
  dup ba> @ ( ba w )
  swap 1 and IF $ff and ELSE 8 rshift THEN ;

: (wbba0) ( b ba -- ) ba> dup @ ( b addr w ) $00ff and rot 8 lshift or swap ! ;
: (wbba1) ( b ba -- ) ba> dup @ ( b addr w ) $ff00 and rot          or swap ! ;
: wbba    ( b ba -- ) dup 1 and IF (wbba1) ELSE (wbba0) THEN ;

: rwba ( ba -- w )
  dup 1 and IF dup rbba 8 lshift swap 1+ rbba or ELSE ba> @ THEN ;
: wwba ( w ba -- ) over 8 rshift over wbba   1+ >R $ff and R> wbba ;


\ Header pieces ==============================================================
: version ( -- v ) 0 rbba ;

\ The maximum byte address on the system is found at $04 in the header.
: himem   ( -- ba ) 4 rwba ;


\ Disk-backed Reads ==========================================================
\ The disk buffers are 512 words or 1024 bytes long.
\ Packed and word addresses are always even, so we can use DCPU reads.
: rbdisk ( byte-offset blk# -- b )
  load-buffer over 2/ + @ ( byte-offset word )
  swap 1 and 0= IF 8 rshift THEN ( b ) ;

: disk+1 ( offset blk# -- offset' blk#' )
  >R 1+ R> over 1024 >= IF >R $3ff and R> 1+ THEN ;

: rwdisk ( offset blk# -- w )
  over 1 and 0= IF load-buffer swap 2/ + @ EXIT THEN \ Fast case for even ones.
  2dup rbdisk 8 lshift >R disk+1 rbdisk R> or ;

\ Double addresses ===========================================================
\ The max length of story file is 512KB = 19 bits of resolution.
\ That's 9 bits of disk block number and 10 of byte offset into the
\ 512-word/1024-byte block.
\ From a disk reading POV that's bbb bbbb bboo oooo oooo
: da>disk ( da -- offset blk# )
  over $3ff and >R >R   ( lo    R: offset hi )
  10 rshift   R> 10 lshift or ( blk#   R: offset )
  R> swap ;

: rbda   ( da -- b ) da>disk rbdisk ;
: rwda   ( da -- w ) da>disk rwdisk ;

\ Word addresses =============================================================
\ These are always even, which means they are on DCPU word boundaries.
\ However they can run outside the low-memory region, and therefore be on disk.
: rwwa ( wa -- w ) dup himem 2/ < IF $8000 or @ EXIT THEN
  \ Still here: This is in high memory - shift it into a double word.
  dup $8000 and IF 1 ELSE 0 THEN >R 1 lshift R> rwdisk ;

\ Packed addresses ===========================================================
: pa>da-3 ( pa -- da ) dup 15 rshift   >R 1 lshift R> ;
: pa>da-5 ( pa -- da ) dup 14 rshift   >R 2 lshift R> ;
: pa>da-8 ( pa -- da ) dup 13 rshift   >R 3 lshift R> ;

CREATE packed-widths
' pa>da-3 dup dup , , ,
' pa>da-5 dup     , ,
0 , 0 ,
' pa>da-8 ,

: pa>da ( pa -- da ) version cells packed-widths + @ execute ;
: rbpa  ( pa -- b )  pa>da rbda ;
: rwpa  ( pa -- b )  pa>da rwda ;

