\ Embeds a (target) file as a string, and feeds it in as input.
\ Gives a cleaner input without the need to juggle serial devices and FIFOs.

\ NOTE: Data space initializers have already been run!
\ So we can't use eg. CONSTANT here.

host definitions

: embed ( c-addr u1 -- )
  r/o open-file abort" Failed to open test disk" ( fid ) >R
  code-space space>there   100000   R@ read-file   ABORT" Failed to read test disk" ( u2 )
  code-space <t-allot> tcode-align
  R> close-file ABORT" Failed to close test disk" ;


host code-space @

S" test.disk" embed

host code-space @

target definitions

\ Can't use CONSTANT after the init-data code.
target : embedded-top   [ host tliteral target ] ;
target : embedded-tests [ host tliteral target ] ;
VARIABLE embedding-ptr

: next-line ( -- c-addr u )
  embedding-ptr @ BEGIN dup c@ $0a <> WHILE char+ REPEAT ( c-addr-nl )
  embedded-top min  ( c-addr-nl/min )
  embedding-ptr @ - ( u )
  embedding-ptr @ swap ( c-addr u ) ;

\ Again, CONSTANTs don't work here.
: src-embed [ host -2 tliteral target ] ;

\ Loads the next line into TIB ready for input.
: test-refiller ( -- ready? )
  next-line ( c-addr u )
  dup char+ embedding-ptr +! \ Gotta skip over the newline
  'source 2!   src-embed 'source-id !   0 >IN !
  source drop embedded-top < ; \ Still more if the line start if before the end.

: run-tests ( -- )
  boot
  ." This is an intro message!" cr
  src-embed 'source-id !    \ embedding!
  embedded-tests embedding-ptr ! \ start of the embedded region
  [ host T' test-refiller tliteral target ] src-embed refiller !
  (quit) ;

host definitions
T' run-tests   entry-point tcode!

:noname S" forth-arm-tests.bin" ; IS tcforth-output
