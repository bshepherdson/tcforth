\ Target words to get metacompiled, that hide the details of the machine and the
\ Forth model (eg. ITC vs. DTC vs. STC)
\ This file: DTC on ARMv4 32-bit.

\ TODO: Most of these are not needed on a non-interactive target.

\ ,DOCOL is already defined.
target definitions

\ ARM BL  is cccc 101L + 24-bit signed offset in words.
\ XXX: Assumes the target is in range!
target : !CF ( codeword-addr xt -- )
  dup >R \ Save the slot address.
  8 + -    ( delta-bytes )
  2 rshift ( delta-words )
  $00ffffff and
  $eb000000 or R> ! ;

\ Add ,CF, which expects the address of the codeword on the stack.
\ For DTC this is bl, to compile a branch to the target.
target : ,CF ( codeword-addr -- ) here   0 ,   !cf ;

\ Write the code field for a colon definition.
\ This is   docol ,cf
target : ,DOCOL ( -- ) [ host docol tliteral target ] ,CF ;

target : PAD ( -- addr )
  [ host data-space @ tliteral   128 tdata-allot   target ] ;

host REQUIRE ../shared/model-target.ft

\ DOES> ======================================================================
\ TDOES runs during compilation TARGET : DOES> - compile code into its thread!
host definitions

\ Moves THERE back by 1 cell and pushes the most recently compiled word.
: asm-lit ( -- w ) -4 tcode-allot   code-space @ tcode@ ;

: EXIT-compile, ( -- )
  'EXIT @ tliteral   [T'] compile, tcompile, ;

: TDOES,
  [T'] (DOES>) tliteral  [T'] compile, tcompile,
  [T'] EXIT    tliteral  [T'] compile, tcompile,

  \ The dodoes-code here gets the PFA in lr, so it needs to:
  \ (1) push TOS; (2a) lr tos mov, (3) docol bl,
  \ If we have separate code and data spaces, then (2b) lr [] tos ldr,
  \ This is abstracted by pfa->tos, from model.ft
  [ {{ tos }} push, asm-lit tliteral ] [T'] , tcompile,
  [ pfa->tos,       asm-lit tliteral ] [T'] , tcompile,
  [ docol bl,       asm-lit tliteral ] [T'] , tcompile, ;
