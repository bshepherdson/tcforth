\ Kernel for the DCPU-16.
\ This file runs in the HOST vocabulary, assembling CODE words into the target.
\ We attempt to use macros from model.ft (already loaded) to hide details of
\ the system design.

\ Assembler abstractions:
\ - rsp is the return stack pointer itself
\ - [rsp] is RSP's TOS
\ - ip is the current IP address
\ - [ip] the value found at IP.

\ Assumptions in this code:
\ - Using the DCPU-16 hardware SP as Forth's data stack.
\ - TOS on stack.
\ - A B C X Y are free.
\ - J is reserved. No STI/STD.

\ These are HOST vocab words that define assembler words on the Target - their
\ mirror words are regular.
: code      ( "name" -- ) (TCREATE) ;
: end-code  ( -- )        next, ;
\ End marker, but no NEXT.
: end-code-bare ( -- ) ;


\ Standard dictionary headers: link, length+immediate+hidden word, len words of
\ name, code field.

code +        pop peek add,   end-code
code -        pop peek sub,   end-code \ This is correct NOS - TOS order!
code *        pop peek mli,   end-code
code -        pop peek sub,   end-code
code /        pop peek dvi,   end-code
code MOD      pop peek mdi,   end-code
code U/       pop peek div,   end-code
code UMOD     pop peek mod,   end-code
code AND      pop peek and,   end-code
code OR       pop peek bor,   end-code
code XOR      pop peek xor,   end-code
code LSHIFT   pop peek shl,   end-code
code RSHIFT   pop peek shr,   end-code
code ARSHIFT  pop peek asr,   end-code
code 2*       1 # peek shl,   end-code
code 2/       1 # peek asr,   end-code

\ Defining this in CODE because some chips can do it as one operation, with
\ MOD and / as derivatives, and some have to do it this way.
code /MOD
  pop  ra   set, \ divisor
  peek rb   set, \ dividend
  ra   peek mdi, \ remainder underneath
  ra   rb   dvi, \ quotient
  rb   push set, \ on top
end-code



code INVERT   $ffff # peek xor, end-code
code NEGATE
  0 # ra set,
  pop ra sub,
  ra push set,
end-code

\ Comparison operators all have the same shape with different branches.
: comparison ( if-xt "name" -- )
  >R
  code
    0 # ra set,
    pop pop   R> execute
      -1 # ra set,
    ra push set,
  end-code
;

' ife, comparison =
' ifu, comparison <
' ifl, comparison U<


\ Stack operations
code DUP    peek   push set,  end-code
code DROP   pop    ra   set,  end-code
code OVER   1 picc push set,  end-code

code SWAP
  pop  ra   set,
  pop  rb   set,
  ra   push set,
  rb   push set,
end-code

code ROT ( c b a -- b a c )
  pop  ra   set,
  pop  rb   set,
  pop  rc   set,
  rb   push set,
  ra   push set,
  rc   push set,
end-code

code -ROT ( c b a -- a c b )
  pop  ra   set,
  pop  rb   set,
  pop  rc   set,
  ra   push set,
  rc   push set,
  rb   push set,
end-code

code ?DUP
  0 # peek ifn,
    peek push set,
end-code

code NIP ( y x -- x )
  pop ra   set,
  ra  peek set,
end-code

code TUCK ( y x -- x y x )
  pop ra   set,
  pop rb   set,
  ra  push set,
  rb  push set,
  ra  push set,
end-code


code SP@   sp  push set,   end-code
code SP!   pop sp   set,   end-code
code RP@   rz  push set,   end-code
code RP!   pop rz   set,   end-code

code >R    pop  pushrsp,   end-code
code R>    push poprsp,    end-code
code R@    [z]  push set,  end-code

code DEPTH
  sp0 # ra set,
  sp    ra sub,
  ra  push set,
end-code


code @
  pop  ra   set,
  [a]  push set,
end-code

code !
  pop  ra  set,
  pop  [a] set,
end-code

\ These are identical to @ and ! in DCPU-16.
code C@
  pop  ra   set,
  [a]  push set,
end-code

code C!
  pop  ra  set,
  pop  [a] set,
end-code

\ These store as hi, lo in memory, but push as ( lo hi ) double-words.
code 2@
  pop    ra   set,
  1 [a+] push set,
  [a]    push set,
end-code

code 2!
  pop    ra   set,
  pop    [a]  set,
  pop  1 [a+] set,
end-code

code +!
  pop ra  set,
  pop [a] add,
end-code


\ Leaves I alone. Jump directly into the target's code field.
\ The EXECUTEd word's NEXT will continue after here (eventually).
code EXECUTE
  pop pc set,
end-code-bare

\ Uses the built-in, TechCompliant DCPU LOG instruction to log TOS.
code LOG ( x -- )
  pop log,
end-code
\ Likewise, DCPU BRK
code BREAK ( n -- )
  pop brk,
end-code



label var_dp          0 asm,
label var_latest      0 asm,
label var_base        0 asm,
label var_state       0 asm,
label var_handler     0 asm,

label var_last_parse  0 asm, 0 asm,
label var_source      0 asm, 0 asm,
label var_in_ptr      0 asm,
label var_source_id   0 asm,
label input-buf       128 there +!

code DP
  var_dp # push set,
end-code

code ,
label (compile)
  var_dp  # rb  set,
  [b]       rc  set,
  pop       [c] set,
  1 #       [b] add,
end-code

code C,         (compile) # pc set, end-code-bare
code COMPILE,   (compile) # pc set, end-code-bare

code HANDLER      var_handler    # push set, end-code
code 'LATEST      var_latest     # push set, end-code
code STATE        var_state      # push set, end-code
code BASE         var_base       # push set, end-code
code 'SOURCE      var_source     # push set, end-code
code 'SOURCE-ID   var_source_id  # push set, end-code
code >IN          var_in_ptr     # push set, end-code
code TIB          input-buf      # push set, end-code
code LAST-PARSE   var_last_parse # push set, end-code
code F_IMMED      f_immed        # push set, end-code


code 2DUP
  1 picc push set,
  1 picc push set,
end-code

code 2DROP
  2 # sp add,
end-code

code 2SWAP ( x c b a -- b a x c )
  pop   ra   set,
  pop   rb   set,
  pop   rc   set,
  pop   rx   set,
  rb    push set,
  ra    push set,
  rx    push set,
  rc    push set,
end-code

code 2OVER
  3 picc push set,
  3 picc push set,
end-code


code 1+      1 # peek add,   end-code
code CELL+   1 # peek add,   end-code
code CHAR+   1 # peek add,   end-code
code 1-      1 # peek sub,   end-code

\ These are no-ops
code CELLS   end-code
code CHARS   end-code

code CELL   1 # push set,   end-code


\ Double-cell arithmetic
\ TODO 123. double-cell conversion in the >NUMBER interpreter
code S>D
  0 #     ra   set,
  $8000 # peek ifb, \ Bit in common
    -1  # ra   set,
  ra   push  set,
end-code

\ D>S is DROP
code D>S   1 # sp add,  end-code

code D+  ( l1 h1 l2 h2 -- l3 h3 )
  pop  rb     set, \ h2
  pop  ra     set, \ l2
  ra   1 picc add, \ l1+l2    -> l3, EX
  rb   peek   adx, \ h1+h2+EX -> h3
end-code

code D-  ( l1 h1 l2 h2 -- l3 h3 )
  pop  rb     set, \ h2
  pop  ra     set, \ l2
  ra   1 picc sub, \ l1-l2    -> l3, EX
  rb   peek   sbx, \ h1-h2+EX -> h3
end-code

code UDM* ( l1 h1 n2 -- l3 h3 )
  pop  ra   set,
  pop  rb   set,
  pop  rc   set,
  ra   rc   mul, \ C is lo*n, EX is the carry
  ex   push set, \ Save EX
  ra   rb   mul, \ B is hi*n
  pop  rb   add, \ Add the old carry from lo to h3
  rc   push set, \ Push lo
  rb   push set, \ Push hi
end-code

code UM/MOD ( ulo uhi udiv -- ur uq )
  \ Dividing a 32-bit unsigned dividend by an unsigned 16-bit divisor to get
  \ an unsigned 16-bit quotient and unsigned 16-bit remainder.
  \ This works by successive bit-shifting until we run out of divisor bits.
  \ The dividend goes into Y:X where Y becomes the remainder and X the quotient.
  \ Each steps shifts this pair left, moving the top bit of the low/quotient
  \ into the high/remainder.
  \ We shift in a 0 there, but if the remainder is >= the divisor, we subtract
  \ the divisor from the remainder and make bit 0 of the quotient 1.
  \ After cycling for as many bits as the divisor is wide (16), all the dividend
  \ bits have been shifted out of the quotient, and the remainder holds exactly
  \ the remainder we want!
  pop   ra set, \ A=divisor
  pop   ry set, \ Y=high dividend and remainder.
  pop   rx set, \ X=low dividend and quotient.
  16 #  rc set, \ C=bit counter

  label UM/MOD-loop
    \ Shift Y:X left as a 32-bit value.
    1 # ry shl, \ Shift the high side first.
    1 # rx shl, \ Then the low side. EX holds the shifted-out bit from low!
    ex  ry bor, \ OR that 1 from ex into high.

    \ Now check if the divisor (A) is unsigned-greater than the remainder in Y.
    ry ra ifg,
      fwd pc set, \ If it is, we can skip ahead.
    \ Here the divisor in A is <= the remainder in Y.
    ra  ry sub,   \ Subtract the divisor A from the remainder Y.
    1 # rx bor,   \ And make the low quotient X bit a 1.

    resolve
    1 # rc sub,   \ Reduce our counter C
    0 # rc ifn,
      UM/MOD-loop # pc set, \ Jump back to the top if C isn't 0 yet.

  \ C=0 so we're done shifting. Y is the remainder, X the quotient.
  ry push set,
  rx push set, ( rem quot )
end-code


\ TODO More double-cell arithmetic?


\ Branches are abstracted, because they differ signficantly on STC systems,
\ and even on others they might prefer relative or absolute branches.
\ ,BRANCH ,DEST and !DEST handle that abstraction between the kernel and the
\ shared high-level Forth control structures.

\ On the DCPU, these are absolute new I values in the next slot of the thread.
code (BRANCH)
  [ip] ip set,
end-code

code (0BRANCH)
  ra <[ip]+,   \ IP advanced; A holds the optional target.
  0 # pop ife,
    ra ip set, \ Branch passed, so set IP to the target.
end-code


code EXIT
  \ Get the target XT for EXIT and stash it in the forward reference.
  here 'EXIT !

  ip poprsp,
end-code

\ Copies src to dst from lower addresses to higher.
code MOVE< ( src dst u -- )
label (MOVE<)
  ri ra set, \ Save IP to A for now.

  pop rc set, \ Length in C
  pop rj set, \ Dest in J
  pop ri set, \ Src  in I

  fwd pc set, \ Jump ahead to the loop tail.

  label MOVE<-loop
    [i] [j] sti, \ Copy a word.
    1 # rc  sub, \ Decrement the counter.
    resolve      \ Resolve the above fwd reference.
    0 # rc  ifn,
      MOVE<-loop # pc set, \ Loop if nonzero

  \ Ran out of copy.
  ra ri set, \ Restore IP before NEXT.
end-code

\ Copies src to dst from higher addresses to lower.
code MOVE> ( src dst u -- )
label (MOVE>)
  ri ra set, \ Save IP to A for now.

  pop rc set, \ Length in C
  pop rj set, \ dst in J
  rc  rj add,
  1 # rj sub, \ dst + len - 1 in J
  pop ri set, \ src  in I
  rc  ri add,
  1 # ri sub, \ src + len - 1 in I

  fwd pc set, \ Jump ahead to the loop tail.

  label MOVE>-loop
    [i] [j] std, \ Copy a word.
    1 # rc  sub, \ Decrement the counter.
    resolve      \ Resolve the above fwd reference.
    0 # rc  ifn,
      MOVE>-loop # pc set, \ Loop if nonzero

  \ Ran out of copy.
  ra ri set, \ Restore IP before NEXT.
end-code

\ A jsr docol for reference.
label jsr_docol   docol # jsr,

code (DO) ( limit index --   R: -- limit index )
  pop ra set,
  pop pushrsp,
  ra  pushrsp,
end-code

code (LOOP-END)  ( delta -- done?    R: limit index1 -- limit index2 )
  [z]     rx set,     \ X is the index
  1 [z+]  ry set,     \ Y is the limit
  rx      rc set,
  ry      rc sub,     \ C is i-l
  pop     rj set,     \ J is the delta
  \ We want delta + index - limit
  rj      ra set,
  rc      ra add,     \ A is delta + index - limit
  rc      ra xor,     \ A is d+i-l ^ i-l
  0 #     rb set,
  $8000 # ra ifc,     \ True when top bit is clear.
    -1 # rb set,
  rb      ra set,     \ Keep the first flag in A.

  \ Then calculate delta XOR index - limit
  rj      rc xor,
  0 #     rb set,
  $8000 # rc ifc,
    -1 # rb set,

  rb      ra bor,     \ OR those flags
  -1 #    ra xor,     \ and invert the result
  ra    push set,     \ Push done flag to data stack
  rx      rj add,     \ New index is delta + index
  rj     [z] set,     \ Write it back to the stack.
end-code

code UNLOOP ( --    R: limit index -- )
  2 # rz add,
end-code

code I ( -- index    R: index -- index )
  [z] push set,
end-code

code J ( -- index1   R: index1 limit2 index2 -- index1 limit2 index2 )
  2 [z+] push set,
end-code


\ Wrappers for the fundamental DCPU-family hardware instructions.
\ This allows the hardware interfaces to be written in high-level Forth.
code #DEVICES ( -- n )
  ra hwn,
  ra push set,
end-code

code DEVINFO ( dev-num -- version d-MAKER d-ID )
  pop ra set,
  ra hwq,     \ B:A is ID_hi:lo; C is version; Y:X is manufacturer.
  rc push set,
  rx push set,
  ry push set,
  ra push set,
  rb push set,
end-code

\ Sends a hardware interrupt in DCPU style.

\ The stack before and after has the register values ordered
\ ( a b c x y z i j mask dev-num -- a b c x y z i j ) but only the ones in the
\ mask are included on either side.
\ The mask is JIZYXCBAjizyxcba, with the low bits being inputs and high ones
\ outputs.
label >DEVICE-saved-i 0 asm,
label >DEVICE-saved-z 0 asm,
label >DEVICE-dev     0 asm,

code >DEVICE
  pop   >DEVICE-dev [#] set,
  pop   ex              set, \ EX holds the mask

  \ Save the meaningful registers.
  1 # iaq, \ Queue incoming interrupts - they'll break our saving!
  rz  >DEVICE-saved-z [#] set,
  ri  >DEVICE-saved-i [#] set,

  \ Now get them off the stack.
  $80 # ex ifb,    pop rj set,
  $40 # ex ifb,    pop ri set,
  $20 # ex ifb,    pop rz set,
  $10 # ex ifb,    pop ry set,
  $08 # ex ifb,    pop rx set,
  $04 # ex ifb,    pop rc set,
  $02 # ex ifb,    pop rb set,
  $01 # ex ifb,    pop ra set,

  \ Do the interrupt!
  ex push set,
  >DEVICE-dev [#] hwi,
  pop  ex set,

  $0100 # ex ifb,    ra push set,
  $0200 # ex ifb,    rb push set,
  $0400 # ex ifb,    rc push set,
  $0800 # ex ifb,    rx push set,
  $1000 # ex ifb,    ry push set,
  $2000 # ex ifb,    rz push set,
  $4000 # ex ifb,    ri push set,
  $8000 # ex ifb,    rj push set,

  \ Now restore our registers.
  >DEVICE-saved-i [#]  ri  set,
  >DEVICE-saved-z [#]  rz  set,
  0 # iaq,
end-code


\ The above >DEVICE is pretty expensive, which is fine for occasional HWIs
\ like setting up the LEM1802 memory maps, but is really bad for reading the
\ keyboard. Thus (KEY) is separately coded to get the next key typed.
code (KEY) ( dev-num -- key )
label (key)-loop
  1 # ra set, \ Read next key
  peek hwi,
  0 # rc ife,
    (key)-loop # pc set,
  \ rc log,
  rc peek set, \ Overwrite the device number on top.
end-code

code (KEY-SSI) ( dev-num -- key )
label (key-ssi)-loop
  6 # brk,
  2 # ra set,
  peek hwi,
  0 # rc ifn,
    (key-ssi)-loop # pc set,
  ra peek set,
end-code


\ Interrupts ==================================
\ interrupt_handler is what actually gets IAS'd.
\ It's a machine code routine that sets up a Forth thread with the high-level
\ interrupt routine and its own tail routine.
\ The interrupt message is in A and the old A was pushed onto the stack. Since
\ we might be mid-routine elsewhere, we need to preserve that A!
\ The stack effect of the user handler is ( msg -- )

\ This is the tail-end routine that finishes the interrupt. It restores the old
\ registers off the stack and then does RFI.
label int-EXIT
  \ Restoring JIYXCB - A is already saved, and we're using Z.
  pop rj set,   pop ri set,   pop ry set,
  pop rx set,   pop rc set,   pop rb set,
  0 # rfi,

label interrupt-thread 0 asm, int-EXIT asm,

code (>INTERRUPT) ( xt -- )
  pop   interrupt-thread [#]  set,  \ The first word of the thread.
end-code

label interrupt_handler
  \ First a special case - if the interrupt word is 0, just bail since no one is
  \ listening.
  0 #   interrupt-thread [#] ife,
    0 # rfi,

  \ Gotta save ~all the registers, since Forth words might clobber nearly any
  \ of them. Don't need to save Z or A (A is already saved; Z is handled safely)
  rb push set,   rc push set,   rx push set,
  ry push set,   ri push set,   rj push set,
  \ Make the interrupt-thread the new I
  interrupt-thread # ri set,
  \ And NEXT into it!
  next,


\ Machine code entry point, jumped to by the first instruction at $0000-1
label main
  1 # iaq,                 \ Queueing on for safety.
  interrupt_handler # ias, \ Set up interrupt handler
  rp0 # rz set,            \ Initial RSP
  sp0 # sp set,            \ Initial SP
  0 # iaq,                 \ Enable interrupts again
  entry-point [#] pc set,  \ Jump to the code field of the starter word COLD.


\ Overwrite the jump target of the entry code to be main.
\ The instruction is at $0000 and its target argument at $0001.
main 1 t!

