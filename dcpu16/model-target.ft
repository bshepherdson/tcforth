\ Target words to get metacompiled, that hide the details of the machine and the
\ Forth model (eg. ITC vs. DTC vs. STC)
\ This file: DTC on the DCPU-16.

\ ,DOCOL is already defined.
target definitions

\ Add ,CF, which expects the address to jump to on the stack.
\ A code field here is jsr lit, $7c20 + the literal.
target : ,CF ( codeword-addr -- ) $7c20 , , ;

target : ,DOCOL ( -- ) [ host jsr_docol t@ tliteral target ] , ;

target : LITERAL ( C: x --    X: -- x ) [ host lit tliteral target ] compile, , ; IMMEDIATE
  host acts: tliteral ; IMPERATIVE

\ Compiles a string literal into a thread.
\ On ITC/DTC that means the address of DOSTRING, the length, then the words.
target : ,DOSTRING ( c-addr u -- )
  [ host dostring tliteral target ] compile,   \ Compile the codeword first.
  dup >R c,        \ Then the length
  here R@ move     \ And the text
  R> chars allot ; \ And make room for it.

target : ALIGNED ;
target : ALIGN ; host acts: ;

\ This is actually portable but since it fits right here between ALIGNED and
\ (DOES>), there's no good place to put it with splitting this file into 3.
target : >CFA ( nt -- xt )
  cell+ dup c@ [ host mask_len tliteral target ] and + char+ aligned ;

target : >BODY ( xt -- addr ) 2 cells + ;

target : PAD ( -- addr ) $fb00 ;

\ DOES> ======================================================================
\ Implementing sequence 2
\ (DOES>) runs in eg. CONSTANT to properly compile a particular constant.
\ Inside target (DOES>), TORS points at the EXIT. Just after it is the
\ dodoes-code that should become the new codeword's jump location.
\ $7c20 is JSR lit on DCPU.
target : (DOES>) latest >cfa   $7c20 over !    cell+ R@ cell+ swap ! ;

host T' (DOES>) '(DOES>) !
host T' EXIT    'EXIT !

host definitions

\ Compiles code that will itself compile an exit.
\ Runs while assembling ; for example.
: EXIT-compile, ( -- )
  'EXIT @ tliteral   [T'] compile, tcompile, ;

\ Runs during compilation TARGET : DOES> - compile code into its thread!
: TDOES,
  [T'] (DOES>) tliteral  [T'] compile, tcompile,
  [T'] EXIT    tliteral  [T'] compile, tcompile,
  jsr_docol t@ tliteral  [T'] ,        tcompile, ;

