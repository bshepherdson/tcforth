\ Target words to get metacompiled, that hide the details of the machine and the
\ Forth model (eg. ITC vs. DTC vs. STC)
\ This file: DTC on the DCPU-16.

\ >CFA is already defined, so is ,DOCOL.
target definitions

\ Add !CF, which expects the address to jump to on the stack.
\ A code field here is jsr lit, $7c20 + the literal.
target : !CF ( addr -- ) $7c20 , , ;

target : !DOCOL ( -- ) [ host jsr_docol t@ tliteral target ] , ;

\ Compiles a string literal into a thread.
\ On ITC/DTC that means the address of DOSTRING, the length, then the words.
target : ,DOSTRING ( c-addr u -- )
  [ host dostring tliteral target ] compile,   \ Compile the codeword first.
  dup >R c,        \ Then the length
  here R@ cmove    \ And the text
  R> chars allot ; \ And make room for it.

target : ALIGNED ;
target : ALIGN ;

target : PAD ( -- addr ) $fb00 ;

\ DOES> ======================================================================
\ Implementing sequence 2
\ (DOES>) runs in eg. CONSTANT to properly compile a particular constant.
\ Inside target (DOES>), TORS points at the EXIT. Just after it is the
\ dodoes-code that should become the new codeword's jump location.
\ $7c20 is JSR lit on DCPU.
target : (DOES>) latest >cfa   $7c20 over !    cell+ R@ cell+ swap ! ;

\ On the host, mimic the target (DOES>). On the host side, the mirror body for
\ our defining word (eg. CONSTANT) is on the stack - it contains the target-xt
\ for the DOES> code, as well as the host-xt for the host's DOES> code!
host definitions
: (DOES>) ( mirror-CONSTANT -- )
  \ Step 1: Change the target code field to point to the does-code
  \ which is found in mirror-CONSTANT's t-does field.
  \ t-does is 0 for CREATEd words without TARGET DOES>, eg. VARIABLE.
  dup mirror>t-does @   ?dup IF 'mirror @ mirror>txt @   !dodoes THEN  ( mirror-CONSTANT )
  \ Step 2: Change the newest 'mirror word's interp-xt to mirror-CONSTANT's
  \ h-does field.
  mirror>h-does @   'mirror @ mirror>interp ! ( ) ;

target definitions

host T' (DOES>) '(DOES>) !
host T' EXIT    'EXIT !

\ Runs during compilation TARGET : DOES> - compile code into its thread!
host definitions
: T,DOES
  [T'] (DOES>) tliteral  [T'] compile, tcompile,
  [T'] EXIT    tliteral  [T'] compile, tcompile,
  jsr_docol t@ tliteral  [T'] ,        tcompile, ;

