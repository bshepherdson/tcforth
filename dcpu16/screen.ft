\ LEM1802 screen implementation for DCPU-16 and similar.
\ Uses the default palette and font, and maps the memory to $fd00.
target definitions

\ Interface ==================================================================
\ Due to the complexities of the colour and cursor handling, the user is
\ recommended only to use words without (parens) around them:
\ FG BG FG@ BG@ FG! BG!   BLINK+ BLINK-   REVERSED   COLOURED and the colours.
\ CLEAR AT-XY   DISPLAY EMIT CR TYPE SPACE SPACES   ACCEPT
\ <# # #S sign #>   U. . HEX.
\ Don't touch the cursor directly!

\ Variable dev-lem1802 holds the device number.
$fc00 CONSTANT vram

VARIABLE (colours)

VARIABLE (light)
: LIGHT   8 (light) ! ;
: COLOUR ( c "name" --   X: -- c ) create c, DOES> c@ (light) @ +   0 (light) ! ;
  host acts: create tc, DOES> tc@ ;
target

$0 COLOUR black
$1 COLOUR blue
$2 COLOUR green
$3 COLOUR cyan
$4 COLOUR red
$5 COLOUR pink
$6 COLOUR yellow
$7 COLOUR grey

: white ( -- colour ) light grey ;

\ Character values ===========================================================
\ These words manipulate screen character words on the stack, not in memory.
: fg  ( ch colour -- ch' ) 12 lshift   swap $0fff and or ;
: bg  ( ch colour -- ch' )  8 lshift   swap $f0ff and or ;

\ Reverses the colours of the given screen character.
: reversed ( ch -- ch' )
  dup  $0f00 and 4 lshift   over $f000 and 4 rshift   or
  swap $00ff and or ;

: blink+ ( ch -- ch' ) $0080 or ;
: blink- ( ch -- ch' ) $ff7f and ;

\ Mixes in the current colour settings.
: coloured ( ch -- ch' ) $00ff and   (colours) @   or ;


\ Terminal state =============================================================

: fg@ ( -- colour ) (colours) @ 12 rshift ;
: bg@ ( -- colour ) (colours) @  8 rshift $f and ;
: fg! ( colour -- ) (colours) @ swap fg (colours) ! ;
: bg! ( colour -- ) (colours) @ swap bg (colours) ! ;

\ Defaults to white-on-black.
: default-colours ( -- ) white fg!   black bg! ;

\ Reverses the current colour settings (but doesn't change anything on screen.
: reverse ( -- ) (colours) @ reversed (colours) ! ;

\ Wipes u cells from start index (not an address!) with blank spaces.
: wipe-abs ( addr u -- ) over + swap DO bl coloured i c! LOOP ;
: wipe ( start u -- ) >R vram + R> wipe-abs ;

\ Cursor handling ============================================================
VARIABLE cursor \ Index into the VRAM

12 CONSTANT #rows
32 CONSTANT /row
: rows ( lines -- chars ) 5 lshift ;

\ Sets the whole screen to spaces in the current colour.
\ Moves the cursor to 0 as well.
: clear      ( -- ) 0   #rows /row *   wipe   0 cursor ! ;
: home       ( -- ) cursor @ /row mod negate cursor +! ;
: clear-line ( -- ) home   cursor @ 32 wipe ;

\ Returns the pointer into VRAM of the current cursor.
: >cursor ( -- addr ) cursor @ vram + ;

VARIABLE (cur-ch)
: vacate ( -- ) (cur-ch) @ >cursor c! ;
: arrive ( -- ) >cursor c@  dup (cur-ch) !   reversed >cursor c! ;

: at-xy  ( col row -- ) vacate   /row * + cursor !   arrive ;
: cur-xy ( -- col row ) cursor @ /row /mod ;

host presume scroll target

: +cursor ( n -- )
  cursor @ +
  dup 0< IF /row / 1-   scroll   0 ELSE
    dup 384 >= IF 384 -   /row / 1+   scroll   $160 THEN THEN
  cursor ! ;


\ Scrolling ==================================================================
\ The scroll region is those lines from SCROLL-TOP (inclusive) to
\ SCROLL-BOTTOM (exclusive).
\ The lines above and below are fixed and don't scroll. If the cursor is on the
\ bottom line of a fixed region and writes off the end, the cursor remains
\ pinned in the rightmost column of the bottom row.
\ The default scroll region is the entire screen.
VARIABLE scroll-top   VARIABLE scroll-bottom
: scroll-region ( top bottom -- ) rows scroll-bottom !   rows scroll-top ! ;
: reset-scroll  ( -- ) 0 #rows scroll-region ;

\ Returns the address of the first word to be scrolled.
: scroll-start ( -- vram-addr ) scroll-top    @   vram + ;
\ Returns the address of the first word NOT to be scrolled.
: scroll-stop  ( -- vram-addr ) scroll-bottom @   vram + ;

\ There are four interesting indexes for the scroller:
\ - the top of the scroll frame - scroll-start above
\ - the end of the scroll frame - scroll-stop above
\ - both of these inset by the delta: inset-start and inset-stop below.
VARIABLE <scroll-delta> \ Always positive!

: inset-start ( -- vram-addr ) scroll-start <scroll-delta> @ + ;
: inset-stop  ( -- vram-addr ) scroll-stop  <scroll-delta> @ - ;

\ Scroll width is the full range, minus one delta, so inset-end minus start.
: scroll-width ( -- u ) inset-stop scroll-start - ;
: scroll-wipe  ( start -- ) <scroll-delta> @ wipe-abs ;

: <scroll-down> ( +chars -- )
  <scroll-delta> !
  \ Copy from the inset (ie. second line) to the top (first line).
  inset-start scroll-start scroll-width move
  \ Then blank out the bottom line:
  inset-stop scroll-wipe ;

: <scroll-up> ( -chars -- )
  negate <scroll-delta> !
  \ Copy from the top (ie. first line) to the inset (second line).
  scroll-start inset-start scroll-width move
  \ Then blank out the top line.
  scroll-top scroll-wipe ;

: <scroll> ( delta-chars -- )
  dup 0< IF <scroll-up> ELSE <scroll-down> THEN ;

: scroll ( lines -- ) rows <scroll> ;


\ Printing ===================================================================

\ Emites the given *screen* character word (colours etc. added) at the current
\ cursor. See also EMIT.
: (DISPLAY) ( screen-ch -- ) >cursor c! ;
: DISPLAY   ( screen-ch -- ) vacate   (DISPLAY)   1 +cursor   arrive ;

\ Emits the given ASCII character at the current cursor.
: EMIT ( ascii-ch -- ) coloured display ;

: CR ( -- ) vacate   cursor @ /row 1- and   /row swap -   +cursor   arrive ;


\ Keyboard input =============================================================
\ Keyboard input needs local echo, with basic line editing for eg. backspace.

\ Steps back one, displays a blank at the current slot, and leaves the cursor
\ pointed at the blank. Does nothing if already at the left edge, given by
\ c-addr-min
: BACKSPACE ( c-addr-current c-addr-min -- c-addr' )
  over = IF EXIT THEN \ At left edge, do nothing.
  \ Can't use EMIT directly here, it also juggles the cursor.
  vacate   -1 +cursor   bl coloured (display)   arrive
  1- ( c-addr' ) ;

: ACCEPT-CHAR ( c-addr ch -- c-addr' ) dup emit   over c! char+ ;

\ : (KEY-SERIAL) ( -- key )
\   dev-serial   @ (key-ssi)
\   dup 10 = IF drop $11 THEN   \ Newline
\   dup  8 = IF drop $10 THEN ; \ Backspace

: (KEY-KB)     ( -- key ) dev-keyboard @ (key) ;

VARIABLE key-xt

: ACCEPT ( c-addr max -- len )
  drop dup >R  \ TODO Ignores the max length!
  BEGIN key-xt @ execute   dup $11 <> WHILE \ ( c-addr key )
    dup $10 = IF drop R@ backspace ELSE accept-char THEN
  REPEAT ( end newline   R: start ) drop R> - ( len ) ;

: KEY ( -- char ) key-xt @ execute ;


\ Input sources ==============================================================
\ : SERIAL   ( -- ) ['] (key-serial) key-xt ! ;
: KEYBOARD ( -- ) ['] (key-kb)     key-xt ! ;

\ Initialization =============================================================

: reset-lem ( -- ) keyboard default-colours reset-scroll clear ;

: init-lem ( -- )
  dev-lem1802 @ -1 = IF EXIT THEN \ No such device, just bail.
  keyboard

  \ Send an HWI with A=0, B=vram; no response regs. So that's a mask of 3.
  0 vram 3   dev-lem1802 @ >device
  reset-lem ;

: init-serial ( -- )
  dev-serial @ -1 = IF EXIT THEN \ No such device, just bail.
  \ Send an HWI with A=1, B=0, C=20 (1 octet, 64Kbps)
  1 0 20   7   dev-serial @ >device ;

: semit ( ch -- )
  \ Send an HWI with A=3 B=ch; C gets error status
  3 swap   $403   dev-serial @ >device ;

: stype ( c-addr u -- ) 0 DO dup i + c@ semit LOOP drop ;
