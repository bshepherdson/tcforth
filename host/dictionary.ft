\ Defines the format of Target dictionary headers.
\ Uses abstracted words like TC@ and TCELL+ so it should work on any Target.
host definitions

\ Header structure ===========================================================
\ Each header is a variable-length block like this:
\ Start       Contents                 Size
\ 0           link pointer             1 cell
\ 1c          length byte              1 unit
\ 1c+1u       name characters          1 unit per character (L characters)
\ 1c+(1+L)u   (blank space)            0 to 1c-1u, enough to align.
\ kc          name field               ...

\ So for example, on a byte-addressable 32-bit machine with 4-byte alignment:
\ 0           $1234                    1 cell (4 bytes)
\ 4           Length 5                 1 byte
\ 5           First char F             1 byte
\ 6           First char O             1 byte
\ 7           First char R             1 byte
\ 8           First char T             1 byte
\ 9           First char H             1 byte
\ 10          (blank for alignment)    2 bytes
\ 12          name field

\ On a machine with 16-bit address units and cells, like DCPU-16, every field
\ is a 16-bit word and no alignment is needed.

\ Flags and masks ============================================================
\ The top bit of the length field is used as the IMMEDIATE flag, the next bit
\ for the "smudge" or "hidden" flag. That leaves 6 bits at least for the length
\ of a name.
\ These definitions are portable and will work on all devices
1   tcharbits 1- lshift CONSTANT f_immed
f_immed  1 rshift       CONSTANT f_hidden
f_immed  1-             CONSTANT mask_len_hidden
f_hidden 1-             CONSTANT mask_len


\ Separate name and code spaces ==============================================
\ After the name of the word (and any padding) comes the **name field**.
\ When names and code are collocated, this contains the codeword directly.
\ With separate spaces, it contains a pointer into code space.
: TNAME>STRING ( t-nt -- c-addr u ) tcell+ dup 1+ swap tname-c@ mask_len and ;
: TNAME>CFA    ( t-nt -- t-cfa )    tname>string + taligned ;
: TCFA@        ( t-cfa -- t-xt )    colocated-names? 0= IF tname@ THEN ;
: TNAME>INT    ( t-nt -- t-xt )     tname>cfa tcfa@ ;

\ With separate spaces, compiles the pointer to code space.
\ With combined spaces, does nothing.
: ,tcfa ( -- ) colocated-names? 0= IF code-there @ tname, THEN ;

\ Compiles a fresh Target header with an empty code field.
\ With separated name and code spaces, the name field contains a pointer to the
\ (empty) code field.
: (mk-header) ( c-addr u -- target-xt )
  ." (mk-header) " 2dup type   4 spaces .s cr
  ."     nt: " name-there @ hex. cr
  name-there @   latest tname,   'latest !
  dup tname-c, \ Length byte
  0 DO ( c-addr )
    dup i + c@ >upper tname-c, LOOP drop ( )
  tname-align
  code-there @    ( target-xt )
  ,tcfa ;

\ Looking up the name corresponding to an xt.
: T>NAME ( target-xt -- target-nt|0 )
  'latest @ BEGIN dup WHILE ( target-xt target-nt )
    2dup tname>int = IF nip EXIT THEN
    tname@
  REPEAT nip ;

\ Printing target word names on the host.
: TTYPE ( tc-addr u -- ) over + swap ?DO i tname-c@ emit LOOP ;
: TID.  ( t-nt -- )      tname>string ttype ;


\ Code and data spaces =======================================================
\ Similarly to dictionary headers, a Forth definition has a payload, known as
\ its **parameter field**. For a `CREATE`d definition this is where the data
\ compiled by the definition lives; for a `:` definition it is the Forth
\ "thread".
\ When code and data spaces are combined, the parameter field follows the
\ codeword. When they are separate, there is a pointer after the codeword.
: tpfa@  ( tpf-slot -- body ) colocated-names? 0= IF tcode@ THEN ;
: t>body ( txt -- body )      t>pfa tpfa@ ;

\ Called by TCREATE. For separate spaces this compiles a pointer to data
\ space. Does nothing if the spaces are combined.
: ,pfa ( -- ) colocated-names? 0= IF data-there @ tcode, THEN ;
