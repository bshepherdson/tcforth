\ Metacompiling Forth words ==================================================
\ In the TARGET vocab, : creates a new definition with codeword, in both HOST
\ and TARGET, just like HOST CODE.

\ It switches the *metacompiler* to compiling state, but not the Host's own
\ compiler. Therefore the words in the definition will be executed by the host,
\ rather than compiled. These are the mirror words, and executing them compiles
\ themselves into the Target.

\ Replacement parser for the target "compiler", runs during colon definitions.
\ This is a normal compiler. The regular one would have worked except for two
\ things: (1) HOST STATE is not NATIVE STATE; (2) capturing numbers.
: meta] ( -- )
  \ ." top of meta] " .s cr
  1 state ! \ Start off in the metacompiling state.
  BEGIN state @ WHILE
    parse-name ?dup IF ( c-addr u )
      2dup find-name ( ca u nt|0 ) ?dup IF
        \ Found it. Execute the target word.
        >R 2drop R> name>int ( ." Before: " .s ) execute ( ."    after: " .s cr)
      ELSE ( ca u )
        2dup s>number? IF ( ca u d )
          D>S >R 2drop R> ( n ) tliteral
        ELSE \ Unknown word!
          2drop ." *** Undefined Target word: " type cr bye
        THEN ( )
      THEN ( )
    ELSE ( c-addr ) refill 2drop THEN ( )
  REPEAT \ ." end of meta]" .s cr
  ;


: <T'> ( "name" -- mirror-xt|0 )
  parse-name target-wl search-wordlist   0= IF 0 THEN ;
: (T') ( "name" -- mirror-body ) <T'> ?dup 0= IF 1 ABORT" Bad T'" THEN   >body ;
: T'   ( "name" -- target-xt )   (T') mirror>txt @ ;
: [T'] ( C: "name" --    X: -- target-xt ) T' postpone literal ; IMMEDIATE

\ Parses a target name (immediately, like [']) and then does the mirror compile
\ action for that word. This means [tcompile] works properly with forward refs.
: [tcompile] ( "name" -- )
  \ Save the HOST STATE, then force it to 1 to pretend we're compiling.
  state @ >R   1 state !
  <T'>   ?dup 0= IF 1 ABORT" Bad [TCOMPILE]" THEN
  execute
  R> state !
; IMMEDIATE



\ Runs in the HOST. Replaces the metainterpretation action for the most-recent
\ mirror word.
\ Use IMPERATIVE to make this the metacompilation action instead.
VARIABLE acting?   VARIABLE doing?
: ACTS: ( --    X: -- ) acting? on   :noname ;
\ Makes the interp action of the latest mirror word exactly a host word.
: ACT   ( "name" -- )
  parse-name find-name name?int   'mirror @ mirror>interp ! ;


\ Like IMMEDIATE for metacompilation - copies the metainterpretation action to
\ be the metacompilation action instead.
\ IMPERATIVE makes the metainterpretation action an error (eg. for IF)
\ IMPERATIVE-BOTH keeps both actions the same (eg. for \ )
: IMPERATIVE-BOTH ( -- )
  'mirror @ dup >R  ( mirror     R: mirror )
  mirror>interp @   R> mirror>compile ! ;
: IMPERATIVE ( -- )
  IMPERATIVE-BOTH   ['] interpX-imperative   'mirror @ mirror>interp ! ;


\ Regular semicolon, plus check acting? and doing? and update the 'mirror word.
: ;
  native postpone ; host
  acting? @ IF acting? off   ( xt ) 'mirror @ mirror>interp ! EXIT THEN
  doing?  @ IF doing?  off   ( xt ) 'mirror @ mirror>h-does ! EXIT THEN
; IMMEDIATE


host definitions
\ T' (0BRANCH) CONSTANT T0BRANCH
\ T' (BRANCH)  CONSTANT TBRANCH
T' DROP      CONSTANT TDROP
T' OVER      CONSTANT TOVER
T' =         CONSTANT T=


\ Forward references =========================================================
\ These are implemented as a mirror word with an alternative compile action.
\ The Target xt slot holds the most recent forward reference.
\ When the code tries to compile the forward-referenced word, it compiles the
\ most recent reference into the Target, then saves that location into the xt
\ slot.
\ When we come to resolve the ref, this chain is followed, replacing each with
\ the real xt. When we get to the end (0), save the xt into the mirror word, and
\ reset its compile-xt field to the standard mirror-compile.
host definitions

\ Runs when we're attempting to compile a forward reference. Grab the mirror
\ body from >mirror, compile the value from its txt field into the target, and
\ save this new compilation address to txt.
: mirror-forward ( -- )
  here
  \ ." forward chaining to " dup hex. cr
  mirror-compile   >mirror @ mirror>txt ! ;

: presume ( "name" -- )
  0 mirror
  ['] mirror-forward   'mirror @ mirror>compile ! ;

\ Resolves a forward reference when we come to define it.
\ ?forward runs after (TCREATE), so the newest mirror word's txt is the one we
\ want to use to resolve the forward references.
\ This only runs if (a) the mirror word exists; and (b) its mirror>compile is
\ mirror-forward (otherwise we're redefining).
: resolve-forward ( fwd-mirror-body -- )
  'mirror @ mirror>txt @ ( fwd-mirror-body real-target-xt )
  swap mirror>txt @ BEGIN ?dup WHILE ( real-xt fwd-ref )
    \ ." Resolving forward at " dup hex. ." with " over hex. cr
    dup t@ >R   2dup t!   drop R> ( real-xt fwd-ref' )
  REPEAT drop ;

: ?!forward ( mirror-body|0 -- ) ?dup IF resolve-forward THEN ;

\ Looks for an existing forward reference, before we create the new one.
: ?forward ( -- mirror-body|0 )
  >IN @   <T'> ( inptr mirror-xt|0 )   swap >IN ! ( mirror-xt|0 )
  dup IF \ The mirror word actually exists.
    >body dup mirror>compile @ ['] mirror-forward <> IF
      drop 0 THEN ( mirror-body|0 )
  THEN ( mirror-body|0 ) ;

\ TODO It would be good for the forward references to detect a dangling one
\ that is never resolved.

\ Some host-side actions for CODE words, like @ and !
'mirror @
(T') @     'mirror !   act t@
(T') !     'mirror !   act t!
(T') ,     'mirror !   act t,
(T') cells 'mirror !   act tcells
(T') dup   'mirror !   act dup
'mirror !

\ Hand-roll the target+mirror definitions for : and ;
\ They don't work on the target yet, just making space.
target definitions host
code : end-code 0 t, 0 t, 0 t, 0 t, 0 t, 0 t, 0 t, 0 t, \ 9 cells
  host acts: ?forward   (TCREATE)   ?!forward   ,docol   meta] ;

code ; end-code 0 t, 0 t, 0 t, 0 t, 0 t, 0 t, 0 t, 0 t, \ Likewise, 9 cells.
\ Mark ; as IMMEDIATE
latest tcell+ dup tc@ f_immed or swap tc!
  host acts: 0 state !   EXIT, ; IMPERATIVE


host here ." Metacompilation starts at " dup hex.  ." (" 2* hex. ." )" cr

?stack-clear

\ entry-point should now be set properly for the :main routine.
