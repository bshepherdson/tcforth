\ Sets up the three dictionary spaces for the assembler and metacompiler.

\ The Forth dictionary is divided into three parts:
\ - Code space, where native code and read-only data goes.
\ - Name space, where the names and dictionary data structure goes.
\ - Data space, where writable data goes.

\ These spaces might overlap, as in traditional Forths. But they might not!
\ Note that the data space is not part of the binary and needs to be
\ initialized by the setup code.
\ See host/configuration.ft for the flags that control this setup.

\ Each space is captured by a THERE-PTR array, which looks like this:
\ [ there | max-there | host-ptr | org | file-offset ]
\ there       reckoned in the target address space; tcode-addr etc. to adjust
\ max-there   the largest THERE value ever used
\ host-ptr    host pointer to where its actually being assembled; indexed from 0
\ org         target address space point where the *start* of this range is found
\ file-offset offset into the output file where this belongs

\ To actually look up a byte from the space:
\ - org is subtracted from it, creating a 0-based offset into the space
\ - then that offset is used for the host-ptr to get the real value

REQUIRE configuration.ft

\ Allocates 8MB on the host heap.
: new-space ( -- host-addr ) 8 1024 * 1024 * allocate drop ;

VARIABLE all-spaces   0 all-spaces !

begin-structure [space]
  field: space>ptr
  field: space>host-array
  field: space>max
  field: space>org
  field: space>offset
  field: space>next
  field: space>init-copy?
end-structure


\ Sets THERE, ORG and file-offset all to 0; these should be customized by
\ target-specified code as needed. Use ORG! to set these.
: there-ptr ( host-c-addr -- space )
  native here host >R   [space] allot
  dup R@ space>host-array  !
      R@ space>max         !
  0   R@ space>ptr         !
  0   R@ space>org         !
  0   R@ space>offset      !
  0   R@ space>init-copy?  !
  all-spaces @ R@ space>next !
  R@ all-spaces !
  R> ;


\ The system needs code, name and data spaces. These are VALUEs, so that
\ user code can swap out which one is active to eg. separate initialized,
\ read-only and uninitialized data.
0 VALUE code-space   \ Initialized, executable, maybe read-only.
0 VALUE name-space   \ Initialized, maybe read-only.
0 VALUE data-space   \ Initialized, writable data.


\ Configuring spaces =========================================================
\ These steps are necessary for each space.

\ 1. Call this for all spaces, to set the base address on the target.
: org! ( target-addr there-array -- )
  2dup !   space>org ! ;

\ 2. Set up the space in the output file.
\ - For initialized spaces present in the output file, set space>offset.
\   - If the data is loaded in ROM and needs to be copied, call copied!
\ - If the space should be skipped in the output, call ephemeral!
: copied!    ( there-array -- ) space>init-copy? ON ;
: ephemeral! ( there-array -- ) -1 swap space>offset ! ;


\ Standard setups ============================================================
\ A single integrated space. The simplest configuration for things like DCPU-16
\ which load an input binary into writable memory.
\ (If has-dictionary? is false, then the name-space is separate.)
: single-space! ( -- )
  new-space THERE-PTR
  dup TO code-space
      TO data-space

  config has-dictionary? @ IF code-space ELSE new-space THEN
  TO name-space ;


\ Basic split spaces, each one a separate large area on the host.
\ Throws if the configuration doesn't match - it must have indirect names and data.
: split-spaces! ( -- )
  config names-indirect? @ 0= ABORT" Cannot do split spaces without names-indirect? ON"
  config data-indirect?  @ 0= ABORT" Cannot do split spaces without data-indirect? ON"

  new-space THERE-PTR TO code-space
  new-space THERE-PTR TO name-space
  new-space THERE-PTR TO data-space ;


\ Custom setups ==============================================================
\ Allocate whatever space on the host you like and set them in the foo-space
\ VALUEs.
\ All of the foo-spaces **must** be set to something! Several of them can
\ be the same underlying space, however. (Note that a name-space is required for
\ the metacompiler, even if the dictionary doesn't reach the output file.)


\ Defaulting =================================================================
\ The top of the machine/system.ft calls ?default-spaces.
\ If *all three* spaces are still 0, it silently calls that machine's default-spaces!
\ If *all three* spaces are set to something, it silently does nothing.
\ If only some of the spaces are nonzero, it errors - either use the defaults
\ or roll your own!
DEFER default-spaces! ( -- )

: ?default-spaces ( -- )
  code-space 0=   name-space 0= +   data-space 0= + ( #blanks )
  dup -3 = IF drop default-spaces! EXIT THEN \ All blank, set defaults and bail.

  \ 0 blanks: Good custom setup. Neither 3 nor 0, an error:
  ( 0|sum ) ABORT" Error configuring target memory spaces: you must set all of CODE-SPACE, NAME-SPACE and DATA-SPACE" ;


\ Read and Write helpers =====================================================
0 VALUE current-space

: max! ( x addr -- ) tuck @ max swap ! ;
: +max ( host-addr -- )
  \ dup   current-space space>host-array @   - $2800 > IF 99 throw THEN
  current-space space>max max! ;

: taddr->offset ( target-addr there-array -- target-offset )
  space>org @ - ;
: toffset->hoffset ( target-offset -- host-offset ) bytes/tchar * ;
: hoffset->haddr   ( host-offset there-array -- host-addr )
  space>host-array @ + ;

: >space ( target-addr there-array -- host-addr )
  \ 2dup space>org @ - $2800 > IF 98 throw THEN
  tuck                ( there-array target-addr there-array )
  taddr->offset
  toffset->hoffset
  swap hoffset->haddr ;


\ New read/write logic =======================================================
\ Using the data stack and recursing to make the pieces relative is smart, I think.
\ Also calling from tchars to literal bytes at the same time.
\ The net result is a series of tchars on the stack.

\ 1+ bytes <-> tchar on the stack
\ tchars in order on the stack, first on top <-> tcell on the stack.
: mask ( width -- mask ) 1 swap lshift 1- ;

: <c@> ( c-addr -- b ) dup +max   c@ ;
: <c!> ( b c-addr -- ) dup +max   c! ;

\ Must be supplied as part of the configuration.
\ These must use <c@> and <c!> - they do some "spaces" bookkeeping.
DEFER <tc@*> ( c-addr -- tchar )
DEFER <tc!*> ( tchar c-addr -- )

\ Default implementation is bytes.
' <c@> IS <tc@*>
' <c!> IS <tc!*>

\ DCPU-16 family uses these: big-endian 16-bit words as the address unit.
: <be16@> ( c-addr -- w ) dup <c@> 8 lshift   swap char+ <c@> or ;
: <be16!> ( w c-addr -- ) over 8 rshift over <c!>   char+ <c!> ;


\ These are all based on tchars, so they should work for any tcell size.
: <tchars@> ( c-addr #tchars -- first .. last )
  0 DO dup <tc@*>    swap bytes/tchar + LOOP drop ;

: <tchars!> ( last .. first c-addr #tchars -- )
  0 DO tuck <tc!*>   bytes/tchar + LOOP drop ;

\ These translate between the stacked tchars of the above and unified tcells,
\ depending on the order of the tchars within each tcell.
: <be@> ( c-addr -- value )
  1 tcells <tchars@> ( msc .. lsc )
  0   1 tcells 0 DO swap   tcharbits i * lshift   or LOOP ;

: <be!>  ( value c-addr -- )
  >R 1 tcells 0 DO
    dup tchar-mask and
    swap tcharbits rshift
  LOOP drop ( lsc..msc )
  R> 1 tcells <tchars!> ;


: <le@> ( c-addr -- value )
  1 tcells <tchars@>   ( lsc .. msc )
  0   1 tcells 0 DO tcharbits lshift   or LOOP ;

: <le!> ( value c-addr -- )
  >R   0 1 tcells 1- DO
    dup tcharbits i * rshift tchar-mask and
    swap
  -1 +LOOP drop ( msc .. lsc )
  R> 1 tcells <tchars!> ;


: <t@*> ( c-addr -- tcell ) config little-endian? @ IF <le@> ELSE <be@> THEN ;
: <t!*> ( tcell c-addr -- ) config little-endian? @ IF <le!> ELSE <be!> THEN ;

\ API - Explicit space =======================================================
: <tc@> ( target-addr space -- tchar ) dup TO current-space   >space <tc@*> ;
: <tc!> ( tchar target-addr space -- ) dup TO current-space   >space <tc!*> ;

: <t@>  ( target-addr space -- tcell ) dup TO current-space   >space <t@*>  ;
: <t!>  ( tcell target-addr space -- ) dup TO current-space   >space <t!*>  ;

\ Returns the host-addr for the current THERE position.
: space>there ( space -- host-addr ) dup @ swap >space ;

\ API - Canonical spaces =====================================================
: tcode-c@ ( target-addr -- tchar ) code-space <tc@> ;
: tname-c@ ( target-addr -- tchar ) name-space <tc@> ;
: tdata-c@ ( target-addr -- tchar ) data-space <tc@> ;

: tcode@   ( target-addr -- tcell ) code-space <t@> ;
: tname@   ( target-addr -- tcell ) name-space <t@> ;
: tdata@   ( target-addr -- tcell ) data-space <t@> ;

: tcode-c! ( tchar target-addr -- ) code-space <tc!> ;
: tname-c! ( tchar target-addr -- ) name-space <tc!> ;
: tdata-c! ( tchar target-addr -- ) data-space <tc!> ;

: tcode!   ( tcell target-addr -- ) code-space <t!> ;
: tname!   ( tcell target-addr -- ) name-space <t!> ;
: tdata!   ( tcell target-addr -- ) data-space <t!> ;

\ API - Allot ======================================================================
: <t-allot> ( #tchars space -- )
  dup IS current-space
  tuck +!   \ Updated THERE   ( space )
  dup @ swap >space  ( host-addr )
  1- +max ;

: tname-allot   ( #tchars -- ) name-space   <t-allot> ;
: tcode-allot   ( #tchars -- ) code-space   <t-allot> ;
: tdata-allot   ( #tchars -- ) data-space   <t-allot> ;

: <t,> ( tcell space -- )
  tuck   dup @ swap <t!>
  1 tcells   swap <t-allot> ;

: tname,   ( tcell -- ) name-space <t,> ;
: tcode,   ( tcell -- ) code-space <t,> ;
: tdata,   ( tcell -- ) data-space <t,> ;

: <tc,> ( tchar space -- )
  tuck   dup @ swap <tc!>
  1 swap <t-allot> ;

: tname-c, ( tchar -- ) name-space <tc,> ;
: tcode-c, ( tchar -- ) code-space <tc,> ;
: tdata-c, ( tchar -- ) data-space <tc,> ;


\ API - Alignment ============================================================
\ Use t-allot to force the "max" logic to work.
: <t-align> ( there-ptr -- )
  dup @ dup taligned swap -   swap <t-allot> ;

: tname-align ( -- ) name-space <t-align> ;
: tcode-align ( -- ) code-space <t-align> ;
: tdata-align ( -- ) data-space <t-align> ;


\ Extras =====================================================================
: TVARIABLE ( "name" --    X: -- t-addr )
  data-space @   0 tdata,   CONSTANT ;


\ File output ================================================================
: extend-file ( offset file -- )
  >R s>d
  2dup R@ resize-file       ABORT" failed to resize file"
       R> reposition-file   ABORT" failed to reposition file" ;

: .space ( there-array -- )
  ." Space:" cr
  ." Current: " dup @ hex. cr
  ." Host:    " dup space>host-array @ hex. cr
  ." Max:     " dup space>max @ hex. cr
  ." Target:  " dup space>org @ hex. cr
  ." File:    "     space>offset @ hex. cr ;

\ Host span
: space>span ( there-array -- c-addr u )
  dup  space>host-array @
  swap space>max @
  over - 1+ ;

: space>target-size ( space -- u )
  space>span nip       ( u-bytes )
  bytes/tchar + 1-   bytes/tchar / ;

: space>target-span ( space -- t-addr u )
  dup space>org @ swap space>target-size ;


: toss ( space -- ) ephemeral! ;

: skip-space? ( space -- ? )
  space>offset @ -1 = ;
  \ dup data-space =   config data-space-blank? @ and IF
  \   ." Skipping the data space, it's uninitialized." cr
  \   toss true EXIT THEN

  \ name-space =   config has-dictionary? @ 0= and dup IF
  \   name-space toss
  \   ." Skipping the name space, no dictionary." cr
  \ THEN ( ? ) ;

: dump-space ( there-array file -- )
  \ Bail if this space is a blank data space, or the name-space.
  over skip-space? IF 2drop EXIT THEN

  >R
  dup space>offset @   R@ extend-file
  -1 over space>offset !    \ Set the offset to -1 so it won't be used again.
  space>span
  R> write-file ABORT" Failed to write file" ;

\ Finds the "next" space, ordering by the offset field.
VARIABLE min-space
: space-dumped? ( space -- ? ) space>offset @ -1 = ;
: ?min-space ( space -- )
  \ Spaces which have been written have their offsets overwritten to -1.
  dup space-dumped? IF drop EXIT THEN

  min-space @ 0= IF min-space ! EXIT THEN \ Default to the first one.
  dup space>offset @   min-space @ space>offset @ U<   IF
    min-space ! ELSE drop THEN ;

: next-space ( -- there-array|0 )
  0 min-space !
  all-spaces @ BEGIN ?dup WHILE dup ?min-space   space>next @ REPEAT
  min-space @ ;

\ : .spaces ( -- )
\   ." spaces order: "
\   all-spaces @ BEGIN ?dup WHILE dup space>org @ hex.   space>next @ REPEAT cr ;

: dump-forth ( c-addr u -- )
  cr cr ." Assembling to " 2dup type cr

  W/O BIN create-file ABORT" Failed to open output file" ( file )

  \ Write all the spaces which have been defined.
  BEGIN next-space ?dup WHILE ( file there-array )
    dup .space
    over dump-space
  REPEAT ( file )

  \ And close the file.
  dup flush-file ABORT" Failed to flush"
      close-file ABORT" Failed to close" ;
