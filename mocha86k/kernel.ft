\ Kernel for the Mocha 86k
\ This file runs in the HOST vocabulary, assembling CODE words into the target.
\ We attempt to use macros from model.ft (already loaded) to hide details of
\ the system design.

\ Assumptions in this code:
\ - Using the Mocha 86k hardware SP as Forth's data stack.
\ - TOS in register (tos)
\ - A B C X Y are free.
\ - Z, I and J are reserved.

\ Standard dictionary headers: link, length+immediate+hidden word, len words of
\ name, code field.


\ These are HOST vocab words that define assembler words on the Target - their
\ mirror words are regular.
: code      ( "name" -- ) (TCREATE) ;
: end-code  ( -- )        next, ;
\ End marker, but no NEXT.
: end-code-bare ( -- ) ;

: (noncom) ( op-xt )
  >R
  pop ra  setl,
  tos ra  R> execute
  ra  tos setl, ;

code +        pop tos  addl,   end-code
code -        ' subl, (noncom) end-code
code *        pop tos  mlil,   end-code
code AND      pop tos  andl,   end-code
code OR       pop tos  borl,   end-code
code XOR      pop tos  xorl,   end-code
code LSHIFT   ' shll, (noncom) end-code
code RSHIFT   ' shrl, (noncom) end-code
code ARSHIFT  ' asrl, (noncom) end-code
code 2*       1 # tos shll,    end-code
code 2/       1 # tos asrl,    end-code

\ Defining this in CODE because some chips can do it as one operation, with
\ MOD and / as derivatives, and some have to do it this way.
code /MOD
  pop  ra   setl, \ dividend -> A; divisor in TOS
  tos  ra   dvil, \ quotient -> A; remainder -> EX
  ex   push setl, \ Push remainder
  ra   tos  setl, \ quotient to TOS
end-code

code U/MOD
  pop  ra   setl, \ dividend -> A; divisor in TOS
  tos  ra   divl, \ quotient -> A; remainder -> EX
  ex   push setl, \ Push remainder
  ra   tos  setl, \ quotient to TOS
end-code


code INVERT   tos notl,   end-code
code NEGATE   tos negl,   end-code

\ Comparison operators all have the same shape with different branches.
: comparison ( if-xt "name" -- )
  >R
  code
    0 # ra setl,
    pop tos   R> execute
      -1 # ra setl,
    ra tos setl,
  end-code
;

\ These get compiled as IFxL tos pop which is swapped from the stack order.
' ifel, comparison =
' ifal, comparison <
' ifgl, comparison U<


\ Stack operations
code DUP    tos push setl,  end-code
code DROP   pop tos  setl,  end-code
code OVER
  peek ra   setl,
  tos  push setl,
  ra   tos  setl,
end-code

code SWAP
  pop  ra   setl,
  tos  push setl,
  ra   tos  setl,
end-code

code ROT ( c b a -- b a c )
  {{ rb rc }} popl, \ a is in TOS
  tos ra  setl,
  {{ rb ra }} pshl,
  rc  tos setl,
end-code

code -ROT ( c b a -- a c b )
  {{ rb rc }}  popl,
  {{ tos rc }} pshl,
  rb tos setl,
end-code

code ?DUP
  0 # tos ifnl,
    tos push setl,
end-code

code NIP ( y x -- x )
  pop ra   setl,
end-code

code TUCK ( y x -- x y x )
  {{ ra }}     popl,
  {{ tos ra }} pshl,
end-code


\ Pushes TOS first so it counts in the SP.
code SP@
  tos push setl,
  sp tos setl,
end-code

\ Set SP to TOS then pop the new TOS from it.
code SP!
  tos sp  setl,
  pop tos setl,
end-code

code RP@   tos push setl,   rsp tos setl,   end-code
code RP!   tos rsp  setl,   pop tos setl,   end-code

code >R    tos  pushrsp,    pop tos setl,    end-code
code R>    tos push setl,   tos poprsp,      end-code
code R@    tos push setl,   [rsp] tos setl,  end-code

\ This is a bit weird with TOS in register. The bottom value in memory is
\ actually whatever dummy value was in the TOS register when the first real
\ value was pushed.
\ BUT sp0 is $ff7f and not $ff80, because that's the right value to   sp0 sp!
\ so DEPTH actually pushes TOS early to move SP one notch "too far", then
\ measures the depth from $ff7f, rather than the real empty SP of $ff80.
code DEPTH
  sp0 # ra setl,
  tos push setl, \ Store the old TOS, so it counts.
  sp  ra   subl, \ Subtract current sp from sp0 - depth in words
  1 # ra   shrl, \ Divide by 2 to get depth in cells
  ra  tos  setl,
end-code


code @
  [tos] tos setl,
end-code

code !
  pop  [tos]  setl,
  pop  tos    setl, \ New TOS
end-code

code C@
  ra        clrl, \ Blank all of A
  [tos] ra  setw, \ Loads its low word from TOS
  ra    tos setl, \ And copy into TOS
end-code

code C!
  pop  ra    setl, \ Pop the entire value from the stack!
  ra   [tos] setw, \ Write its low word at [TOS]
  pop  tos   setl, \ And replace TOS
end-code

\ These store as hi, lo in memory, but push as ( lo hi ) double-words.
code 2@
  2 [tos+] push setl,
  [tos]    tos  setl,
end-code

code 2! ( lo hi addr -- )
  pop    [tos]+ setl, \ hi
  pop    [tos]+ setl, \ lo
  pop    tos    setl, \ Replace tos
end-code

code +! ( delta addr -- )
  pop [tos] addl,
  pop tos   setl,
end-code


\ Leaves IP alone. Jump directly into the target's code field.
\ The EXECUTEd word's NEXT will continue after here (eventually).
code EXECUTE
  tos ra  setl,
  pop tos setl,
  ra  pc  setl,
end-code-bare

\ Uses the built-in LOG instruction to log TOS.
code LOG ( x -- )
  tos     logl,
  pop tos setl,
end-code

\ Likewise, system BRK
code BREAK ( n -- )
  brk,
  pop tos setl,
end-code



label var_dp          0 t,
label var_latest      0 t,
label var_base        0 t,
label var_state       0 t,
label var_handler     0 t,

label var_last_parse  0 t, 0 t,
label var_source      0 t, 0 t,
label var_in_ptr      0 t,
label var_source_id   0 t,
label input-buf       : (buf) 128 0 DO 0 tc, LOOP ; (buf)

: (var) ( var-label "name" -- )
  >R
  code
    tos push setl,
    R> # tos setl,
  end-code ;

var_dp (var) DP

code ,
label (compile)
  var_dp  # rb  setl,
  [b]       rc  setl,
  tos       [c] setl,
  2 #       [b] addl,
  pop       tos setl,
end-code

code COMPILE,   (compile) # pc setl, end-code-bare

code C,
  var_dp  # rb  setl,
  [b]       rc  setl,
  tos       [c] setw,
  1 #       [b] addl,
  pop       tos setl,
end-code


var_handler    (var) HANDLER
var_latest     (var) 'LATEST
var_state      (var) STATE
var_base       (var) BASE
var_source     (var) 'SOURCE
var_source_id  (var) 'SOURCE-ID
var_in_ptr     (var) >IN
input-buf      (var) TIB
var_last_parse (var) LAST-PARSE

code F_IMMED   tos push setl,   f_immed # tos setl,   end-code


code 2DUP ( b a -- b a b a )
  peek rb setl,
  {{ tos rb }} pshl,
end-code

code 2DROP ( c b a -- c )
  2 # sp addl,
  pop tos setl,
end-code

code 2SWAP ( x c b a -- b a x c )
  {{ rx rc rb }} popl,
  rb push setl,
  {{ tos rx }} pshl,
  rc tos setl,
end-code

code 2OVER ( x c b a -- x c b a x c )
  tos push setl,     \ A is now at [SP+0]; X is at [SP+6]
  6 [sp+] push setl,
  6 [sp+] tos  setl,
end-code


code 1+      1 # tos  addl,   end-code
code CELL+   2 # tos  addl,   end-code
code CHAR+   1 # tos  addl,   end-code
code 1-      1 # tos  subl,   end-code
code CELLS   1 # tos  shll,   end-code
code CHARS   end-code

code CELL   tos push setl,   2 # tos setl,   end-code


\ Double-cell arithmetic
\ TODO 123. double-cell conversion in the >NUMBER interpreter
code S>D
  0 #     ra   setl,
  $80000000 # tos ifbl, \ Bit in common
    1  # ra    subl,
  ra   push  setl,
end-code

\ D>S is DROP
code D>S   pop tos setl,   end-code

code D+  ( l1 h1 l2 h2 -- l3 h3 )
  pop  ra     setl, \ l2 -> A
  pop  rb     setl, \ h1 -> B
  ra   peek   addl, \ l3 on stack and EX
  rb   tos    adxl, \ h1+h2+EX -> TOS
end-code

code D-  ( l1 h1 l2 h2 -- l3 h3 )
  pop  ra     setl, \ l2 -> A
  pop  rb     setl, \ h1 -> B
  ra   peek   subl, \ l1-l2    -> l3, EX
  tos  rb     sbxl, \ h1-h2+EX -> h3
  rb   tos    setl,
end-code

code UDM* ( l1 h1 n2 -- l3 h3 )
  pop  ra   setl, \ h1 -> A
  pop  rb   setl, \ l1 -> B
  tos  ra   mull, \ A is lo*n, EX is the carry
  ex   push setl, \ Save EX
  tos  rb   mull, \ B is h1*n
  pop  rb   addl, \ Add the old carry from lo to h3
  ra   push setl, \ Push l3
  rb   tos  setl, \ h3 -> TOS
end-code


code UM/MOD ( ulo uhi udiv -- ur uq )
  \ Dividing a 64-bit unsigned dividend by an unsigned 32-bit divisor to get
  \ an unsigned 32-bit quotient and unsigned 32-bit remainder.
  \ This works by successive bit-shifting until we run out of divisor bits.
  \ The dividend goes into Y:X where Y becomes the remainder and X the quotient.
  \ Each steps shifts this pair left, moving the top bit of the low/quotient
  \ into the high/remainder.
  \ We shift in a 0 there, but if the remainder is >= the divisor, we subtract
  \ the divisor from the remainder and make bit 0 of the quotient 1.
  \ After cycling for as many bits as the divisor is wide (32), all the dividend
  \ bits have been shifted out of the quotient, and the remainder holds exactly
  \ the remainder we want!
  pop   ry setl, \ Y=high dividend and remainder.
  pop   rx setl, \ X=low dividend and quotient.
  32 #  rc setl, \ C=bit counter

  label UM/MOD-loop
    \ Shift Y:X left as a 64-bit value.
    1 # ry shll, \ Shift the high side first.
    1 # rx shll, \ Then the low side. EX holds the shifted-out bit from low!
    ex  ry borl, \ OR that 1 from ex into high.

    \ Skip ahead if the divisor (TOS) is unsigned-greater than remainder in Y.
    fwd ry tos brgl,

    \ Here the divisor in TOS is <= the remainder in Y.
    tos ry subl,   \ Subtract the divisor TOS from the remainder Y.
    1 # rx borl,   \ And make the low quotient X bit a 1.

    resolve
    1 # rc subl,   \ Reduce our counter C
    UM/MOD-loop   0 # rc brnl, \ Jump back to the top if C isn't 0 yet.

  \ C=0 so we're done shifting. Y is the remainder, X the quotient.
  ry push setl,
  rx tos  setl, ( rem quot )
end-code


\ TODO More double-cell arithmetic?


\ Branches are abstracted, because they differ signficantly on STC systems,
\ and even on others they might prefer relative or absolute branches.
\ ,BRANCH ,DEST and !DEST handle that abstraction between the kernel and the
\ shared high-level Forth control structures.

\ On Mocha 86k these are absolute new IP values, in the next slot of the thread.
code (BRANCH)
  [ip] ip setl,
end-code

code (0BRANCH)
  tos   ra  setl,
  pop   tos setl,
  [ip]+ rb  setl,
  0 # ra ifel,
    rb ip setl,
end-code


code EXIT
  \ Get the target XT for EXIT and stash it in the forward reference.
  here 'EXIT !

  ip poprsp,
end-code

\ Converts a name token (ie. a hdr pointer) into the code field address, by
\ skipping over the name.
code >CFA ( nt -- xt )
  2 #        tos  addl, \ Bump TOS by 2: points at length word.
  [tos]+     rb   setw, \ B_lo is length word; TOS points at string.
  mask_len # rb   andl, \ B is just the length.
  rb         tos  addl, \ TOS is now the CFA
end-code

\ Copies src to dst from lower addresses to higher.
code MOVE< ( src dst u -- )
  pop rb setl, \ Dest in B
  pop ra setl, \ Src  in A

  fwd pc setl, \ Jump ahead to the loop tail.

  label MOVE<-loop
    [a]+ [b]+ setw, \ Copy a word
    resolve         \ Resolve the above fwd reference.
    MOVE<-loop   tos bzrdl, \ If length nonzero, decrement and loop.

  pop tos setl,
end-code

\ Copies src to dst from higher addresses to lower.
code MOVE> ( src dst u -- )
  pop rb setl, \ dst in J
  tos rb addl, \ dst+len in B
  pop ra setl, \ src in A
  tos ra addl, \ src+len in A

  fwd pc setl, \ Jump ahead to the loop tail.

  label MOVE>-loop
    -[a] -[b] setw, \ Copy a word.
    resolve         \ Resolve the above fwd reference.
    MOVE>-loop rc bzrdl, \ Loop and decrement if nonzero.

  pop tos setl,
end-code


code (DO) ( limit index --   R: -- limit index )
  pop pushrsp,
  tos pushrsp,
  pop tos setl,
end-code

code (LOOP-END)  ( delta -- done?    R: limit index1 -- limit index2 )
  \ Delta in TOS
  [rsp]    rx setl,     \ X is the index
  2 [rsp+] ry setl,     \ Y is the limit
  rx       rc setl,
  ry       rc subl,     \ C is i-l
  \ We want delta + index - limit
  tos     ra setl,
  rc      ra addl,     \ A is delta + index - limit
  rc      ra xorl,     \ A is d+i-l ^ i-l
  0 #     rb setl,
  $80000000 # ra ifcl, \ True when top bit is clear.
    1 # rb subl,
  rb      ra setl,     \ Keep the first flag in A.

  \ Then calculate delta XOR index - limit
  tos     rc xorl,
  0 #     rb setl,
  $80000000 # rc ifcl,
    1 # rb subl,

  rb      ra borl,     \ OR those flags
          ra notl,     \ and invert the result
  tos     rx addl,     \ New index is delta + index
  ra     tos setl,     \ Push done flag to TOS
  rx   [rsp] setl,     \ Write it back to the stack.
end-code

code UNLOOP ( --    R: limit index -- )
  4 # rsp addl,
end-code

code I ( -- index    R: index -- index )
  tos   push setl,
  [rsp] tos  setl,
end-code

code J ( -- index1   R: index1 limit2 index2 -- index1 limit2 index2 )
  tos      push setl,
  4 [rsp+] tos  setl,
end-code


\ Wrappers for the fundamental DCPU-family hardware instructions.
\ This allows the hardware interfaces to be written in high-level Forth.
code #DEVICES ( -- n )
  tos push setl,
  tos      hwnl,
end-code

code DEVINFO ( dev-num -- version maker ID )
  tos      hwql,  \ ID -> A; manufacturer -> X; version -> C
  rc  push setl,
  rx  push setl,
  ra   tos setl,
end-code

\ Sends a hardware interrupt in DCPU style.

\ The stack before and after has the register values ordered
\ ( a b c x y z i j mask dev-num -- a b c x y z i j ) but only the ones in the
\ mask are included on either side.
\ The mask is JIZYXCBAjizyxcba, with the low bits being inputs and high ones
\ outputs.
label >DEVICE-saved-i 0 t,
label >DEVICE-saved-j 0 t,
label >DEVICE-saved-z 0 t,
label >DEVICE-dev     0 t,

code >DEVICE
  tos   >DEVICE-dev [#] setl,
  pop   ex              setl, \ EX holds the mask

  \ Save the meaningful registers.
  1 # iaqw, \ Queue incoming interrupts - they'll break our saving!
  rz  >DEVICE-saved-z [#] setl,
  ri  >DEVICE-saved-i [#] setl,
  rj  >DEVICE-saved-j [#] setl,

  \ Now get them off the stack.
  $80 # ex ifbw,    pop rj setl,
  $40 # ex ifbw,    pop ri setl,
  $20 # ex ifbw,    pop rz setl,
  $10 # ex ifbw,    pop ry setl,
  $08 # ex ifbw,    pop rx setl,
  $04 # ex ifbw,    pop rc setl,
  $02 # ex ifbw,    pop rb setl,
  $01 # ex ifbw,    pop ra setl,

  \ Do the interrupt!
  ex push setl,
  >DEVICE-dev [#] hwil,
  pop  ex setl,

  $0100 # ex ifbw,    ra push setl,
  $0200 # ex ifbw,    rb push setl,
  $0400 # ex ifbw,    rc push setl,
  $0800 # ex ifbw,    rx push setl,
  $1000 # ex ifbw,    ry push setl,
  $2000 # ex ifbw,    rz push setl,
  $4000 # ex ifbw,    ri push setl,
  $8000 # ex ifbw,    rj push setl,

  \ Now restore our registers.
  >DEVICE-saved-j [#]  rj  setl,
  >DEVICE-saved-i [#]  ri  setl,
  >DEVICE-saved-z [#]  rz  setl,
  0 # iaqw,
end-code


\ The above >DEVICE is pretty expensive, which is fine for occasional HWIs
\ like setting up the LEM1802 memory maps, but is really bad for reading the
\ keyboard. Thus (KEY) is separately coded to get the next key typed.
code (KEY) ( dev-num -- key )
label (key)-loop
  1 # ra  setl, \ Read next key
  tos     hwil,
  (key)-loop   0 #   rc brew,
  rc  tos setl, \ Overwrite the device number on top.
end-code

code (KEY-SSI) ( dev-num -- key )
label (key-ssi)-loop
  brk,
  2 # ra  setl,
  tos     hwil,
  (key-ssi)-loop   0 #   rc brnw,
  ra  tos setl,
end-code


\ Interrupts =================================================================
\ TODO rebuild this to service interrupts from Forth


\ Main =======================================================================
label main
  1 # iaqw,                 \ Queueing on for safety.
  \ interrupt_handler # ias, \ Set up interrupt handler
  rp0 # rsp setl,           \ Initial RSP
  sp0 # sp  setl,           \ Initial SP
  0 # iaqw,                 \ Enable interrupts again
  entry-point [#] pc setl,  \ Jump to the code field of the starter word COLD.

