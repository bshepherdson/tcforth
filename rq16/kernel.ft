\ Forth kernel for Risque-16
\ This is a 16-bit word machine like the DCPU-16, but the RISC instruction set
\ is a bit more basic.


\ These are HOST vocab words that define assembler words on the Target - their
\ mirror words are regular.
\ A code definition is the (TCREATE) header plus a code word that points just
\ after itself.
: code      ( "name" -- ) (TCREATE) here tcell+ t, ;
: end-code  ( -- )        next, ;
\ End marker, but no NEXT.
: end-code-bare ( -- ) ;



\ Arithmetic =================================================================
: binary, ( xt-3reg-op, -- )
  >R
  {{ r0 }} pop,
  tos r0 tos R> execute ;

code +       ' add, binary, end-code
code -       ' sub, binary, end-code
code *       ' mul, binary, end-code
\ / MOD U/ UMOD are handled below, there's no built-in ops for this.
code AND     ' and, binary, end-code
code OR      ' orr, binary, end-code
code XOR     ' xor, binary, end-code
code LSHIFT  ' lsl, binary, end-code
code RSHIFT  ' lsr, binary, end-code
code ARSHIFT ' asr, binary, end-code

code 2*   1 # tos lsl,   end-code
code 2/   1 # tos asr,   end-code


code INVERT  tos tos mvn, end-code
code NEGATE  tos tos neg, end-code

: comparison, ( xt-branch-op -- )
  >R
  {{ r0 }} pop,
  1 # r2 neg,           \ -1 in r2
  tos r0 cmp,
  there @ 2 + R> execute \ Skip over 1 if true
    0 # r2 mov,         \ 0 in r2
  r2 tos mov,           \ r2 -> TOS
;

code =   ' beq, comparison,   end-code
code <   ' blt, comparison,   end-code
code U<  ' bcc, comparison,   end-code


\ Stack operations ===========================================================
code DUP   {{ tos }} push,    end-code
code DROP  {{ tos }} pop,     end-code
code OVER
  {{ tos }} push,
  1 # sp [+] tos ldr,
end-code

code SWAP
  {{ r0 }}  pop,
  {{ tos }} push,
  r0 tos    mov,
end-code

code ROT ( r2 r1 tos -- r1 tos r2 )
  {{ r2 r1 }} pop,
  {{ r1 }}    push,
  {{ tos }}   push,
  r2 tos      mov,
end-code

code -ROT ( r2 r1 tos -- tos r2 r1 )
  {{ r2 r1 }}  pop,
  {{ tos r2 }} push,
  r1 tos       mov,
end-code

code ?DUP
  0 # tos cmp,
  fwd beq,     \ Skip if tos is 0
    {{ tos }} push, \ Push a dup if TOS is nonzero.
  resolve
end-code

code NIP ( y x -- x )
  {{ r0 }} pop,
end-code

code TUCK ( y x -- x y x )
  {{ r0 }}     pop,
  {{ tos r0 }} push,
end-code

code 2DUP ( r0 tos -- r0 tos r0 tos )
  0 # sp [+] r0 ldr, \ Peek NOS -> r0
  {{ r0 tos }} push, \ lower reg r0 goes at lower address!
end-code

code 2DROP ( z y x tos -- z tos )
  {{ r0 tos }} pop,
end-code

code 2SWAP ( r2 r1 r0 tos -- r0 tos r2 r1 )
  {{ r2 r1 r0 }} pop,
  {{ r0 }}     push,
  {{ tos r2 }} push,
  r1 tos mov,
end-code

code 2OVER ( z y x tos -- z y x tos z y )
  2 # sp [+] r0 ldr, \ z -> r0
  {{ tos r0 }} push, \ Push old-tos and Z; memory stack now ( z y x tos z )
  3 # sp [+] tos ldr, \ y -> tos
end-code


code SP@ \ Pushes TOS first so it counts in the SP.
  {{ tos }} push,
  0 # sp tos add,  \ And put SP into it.
end-code

code SP! \ Set SP to TOS and then pop the new TOS from it.
  {{ tos }} push,
  popsp,
  {{ tos }} pop,
end-code

code RP@
  {{ tos }} push,
  rsp tos mov,
end-code

code RP!
  tos rsp mov,
  {{ tos }} pop,
end-code


code >R
  tos pushrsp,
  {{ tos }} pop,
end-code
code R>
  {{ tos }} push,
  tos poprsp,
end-code
code R@
  {{ tos }} push,
  rsp [] tos ldr,
end-code

\ This is a bit weird with TOS in register. The bottom value in memory is
\ actually whatever dummy value was in the TOS register when the first real
\ value was pushed.
\ BUT sp0 is $ff7f and not $ff80, because that's the right value to   sp0 sp!
\ so DEPTH actually pushes TOS early to move SP one notch "too far", then
\ measures the depth from $ff7f, rather than the real empty SP of $ff80.
code DEPTH
  sp0 r0 load,
  {{ tos }} push, \ Make sure TOS is counted as an extra level of depth!
  0 # sp r1 add,  \ SP -> r1
  r1 r0 tos sub,  \ Subtract current sp from sp0, into TOS.
end-code


\ Memory =====================================================================
code @
label @-code
  tos [] tos ldr,
end-code

code !
label !-code
  {{ r0 }}  pop,
  tos [] r0 str,
  {{ tos }} pop,
end-code

\ C@ and C! are identical to @ and ! - just borrow their codewords.
code C@
  @-code   here 1 tcells -   t!
end-code-bare

code C!
  !-code   here 1 tcells -   t!
end-code-bare

\ These store hi, lo in memory, but push as ( lo hi ) double-words.
code 2@
  \ hi goes in TOS, lo gets pushed.
  1 # tos [+] r0  ldr, \ lo -> r0
  {{ r0 }} push,
  tos     []  tos ldr, \ hi -> tos
end-code

code 2! ( lo hi addr -- )
  {{ r0 r1 }} pop,    \ hi -> r0, lo -> r1
  1 # tos []+ r0 str, \ Store hi at [tos]; bump tos.
  tos     []  r1 str, \ Store lo at [tos+1]
  {{ tos }}   pop,    \ Replace TOS
end-code

code +!
  {{ r0 }} pop,  \ delta -> r0
  tos [] r2 ldr, \ value -> r2
  r0 r2 r2  add, \ value + delta -> r2
  tos [] r2 str, \ store value'
  {{ tos }} pop,
end-code

\ Leave IP alone. Jump directly into the target's code word.
\ The EXECUTEd word's NEXT will continue after here (eventually).
\ In ITC an xt points to the code field, which contains the pointer to the code.
\ NEXT leaves the parameter field address (ie. 1 cell after the CFA) in r0!
code EXECUTE
  tos r0 mov,
  {{ tos }} pop,
label EXECUTE-tail   \ Can be called with a CFA in r0.
  1 # r0 []+ r1 ldr, \ r1 holds the pointer to the actual code; r0 is PFA!
  r1 bx,
end-code-bare \ The above BX never returns, of course.

code BREAK ( n -- )
  \ BRK is a 0-register opcode here, so this just puts the parameter into r3 for
  \ reference in the debugger.
  tos r3    mov,
  {{ tos }} pop,
  brk,
end-code


\ Variables and core states ==================================================
label var_dp          0 asm,
label var_latest      0 asm,
label var_base        0 asm,
label var_state       0 asm,
label var_handler     0 asm,

label var_last_parse  0 asm, 0 asm,
label var_source      0 asm, 0 asm,
label var_in_ptr      0 asm,
label var_source_id   0 asm,
label input-buf       128 there +!

code DP
  var_dp lit,
end-code

code ,
label (compile)
  var_dp     r0  load, \ 'dp -> r0
  r0     []  r1  ldr,  \ dp  -> r1
  1 # r1 []+ tos str,  \ tos -> [dp], bump dp
  r0     []  r1  str,  \ Write back dp
  {{ tos }} pop,
end-code

code C,       (compile) b, end-code-bare
code COMPILE, (compile) b, end-code-bare

code HANDLER      var_handler    lit, end-code
code 'LATEST      var_latest     lit, end-code
code STATE        var_state      lit, end-code
code BASE         var_base       lit, end-code
code 'SOURCE      var_source     lit, end-code
code 'SOURCE-ID   var_source_id  lit, end-code
code >IN          var_in_ptr     lit, end-code
code TIB          input-buf      lit, end-code
code LAST-PARSE   var_last_parse lit, end-code
code F_IMMED      f_immed        lit, end-code


\ More arithmetic ============================================================
code 1+      1 # tos add,  end-code
code CELL+   1 # tos add,  end-code
code CHAR+   1 # tos add,  end-code
code 1-      1 # tos sub,  end-code

\ These are no-ops.
code CELLS end-code
code CHARS end-code

code CELL    1 lit,        end-code


\ Double-cell arithmetic =====================================================
code S>D
  {{ tos }} push,
  0 # r0  mov,
  0 # tos cmp,
  there @ 2 + bpl, \ Skip 1 if TOS is positive or 0.
    1 # r0 neg,    \ -1 to r0 if it's negative.
  r0 tos mov,
end-code

\ D>S is drop
code D>S  {{ tos }} pop,   end-code

code D+  ( l1 h1 l2 h2 -- l3 h3 )
  {{ r2 r1 r0 }} pop, \ r2 l1   r1 h1   r0 l2   tos h2
  r2 r0  r0  add,     \ l1 + l2 = l3 -> r0
  r1 tos tos adc,     \ h1 + h2 + C = h2 -> tos
  {{ r0 }} push,
end-code

code D-  ( l1 h1 l2 h2 -- l3 h3 )
  {{ r2 r1 r0 }} pop, \ r2 l1   r1 h1   r0 l2   tos h2
  r2 r0  r0  sub,     \ l1 - l2 = l3 -> r0
  r1 tos tos sbc,     \ h1 + h2 + C = h2 -> tos
  {{ r0 }} push,
end-code

code UDM* ( l1 h1 u2 -- l3 h3 ) \ That is, multiply unsigned double by single.
  \ The fundamental loop here is:
  \ - If bit 0 of the multiplier (u2 in TOS) is 1, add multiplicand to result.
  \ - Shift multiplicand left by 1.
  \ - Shift multiplier right by 1.
  \ Do this 16 times (ie. the width of the multiplier) and stop.
  \ So: r0:r1 is our result; r2:r3 is our multiplicand, TOS is our multiplier.
  \ r4 starts at 16 and counts down to 0, and is our loop counter.
  r0 r0 r0 xor,    \ Zero out the result r0:r1.
  r1 r1 r1 xor,
  {{ r3 r2 }} pop, \ Get the multiplicand off the stack into r2:r3.

  \ First a special case - push 0s and bail if u2 is 0.
  0 # tos cmp,
  fwd bne,
    {{ r0 }} push, \ We happen to have a 0 handy, and 0 in TOS.
    next, \ And we're done.
  resolve

  1 # r4 mov,      \ 1 in r4 to use for TST below.

  label UDM*loop
    \ TST bit 0 of TOS
    r4 tos tst,
    fwd beq,      \ Skip down if 0, ie. bit 0 clear.
      \ Not skipped, therefore add multiplicand to result.
      r3 r1 r1 add, \ Low
      r2 r0 r0 adc, \ Hi with carry
    resolve

    \ Now shift the multiplier right by 1.
    1 # tos lsr,
    fwd beq, \ And skip ahead if it's 0.

    \ If it's not zero, shift the multiplicand up by 1.
    1 # r2 lsl,   \ Hi first
    1 # r3 lsl,   \ Then lo
    fwd bcc,      \ Skip next if that didn't carry, ie. it shifted out a 0.
      1 # r2 add, \ If it did shift a 1, add 1 to hi.
    resolve

    \ Now jump back to the top of the loop.
    UDM*loop b,

  resolve \ The exit point of the loop! TOS is 0 now, so we're done multiplying.
  \ Push our low result to the stack, and make the high result TOS.
  {{ r1 }} push,
  r0 tos mov,
end-code

code UM/MOD ( ulo uhi udiv -- ur uq )
  \ Dividing a 32-bit unsigned dividend by an unsigned 16-bit divisor to get
  \ an unsigned 16-bit quotient and unsigned 16-bit remainder.
  \ This works by successive bit-shifting until we run out of divisor bits.
  \ The dividend goes into r0:r1, and then r0 becomes the remainder and r1 the
  \ quotient.
  \ Each steps shifts this pair left, moving the top bit of the low/quotient
  \ into the high/remainder.
  \ We shift in a 0 there, but if the remainder is >= the divisor, we subtract
  \ the divisor from the remainder and make bit 0 of the quotient 1.
  \ After cycling for as many bits as the divisor is wide (16), all the dividend
  \ bits have been shifted out of the quotient, and the remainder holds exactly
  \ the remainder we want!
  {{ r1 r0 }} pop, \ r0 = high dividend/remainder; r1 = low dividend/quotient
  16 # r2 mov,     \ r2 = bit counter

  label UM/MOD-loop
    \ Shift r0:r1 left as a 32-bit value.
    1 # r0 lsl,   \ hi first
    1 # r1 lsl,   \ then lo
    fwd bcc,
      1 # r0 add, \ Add 1 to hi if we shifted out ie. carry set from lo.
    resolve

    \ Now check if the divisor (TOS) is unsigned-greater than the remainder (r0)
    r0 tos cmp,
    fwd bhi,    \ Jump ahead if unsigned greater.
      \ So here the divisor TOS is <= the remainder r0.
      \ That is, our remainder is too big. So we subtract the divisor from the
      \ remainder, and make the low bit of the quotient a 1.
      tos r0 r0 sub,
      1 #    r1 orr,
    resolve

    1 # r2 sub,
  UM/MOD-loop bne, \ Keep looping if it's not 0 yet.

  \ Now r0 is the remainder, r1 the quotient.
  {{ r0 }} push,
  r1 tos mov,     ( rem quot )
end-code


\ Branches ===================================================================
\ Like the DCPU model, the Risque-16 uses 16-bit absolute targets in the thread.
code (BRANCH)
  ip [] ip ldr,
end-code

code (0BRANCH)
  1 # ip []+ r1 ldr, \ Branch dest in r1; bump IP past it.
  tos r0 mov,
  {{ tos }} pop,     \ Replace TOS from stack.
  r0 r0 mov,         \ Sets NZ per old-TOS
  fwd bne,           \ If TOS is nonzero, don't branch.
    \ TOS is 0, so branch.
    r1 ip mov,
  resolve
end-code


\ Words
code EXIT
  \ Get the target XT for EXIT and stash it in a forward reference.
  \ It's actually 1 earlier because of the codeword.
  here 1- 'EXIT !
  ip poprsp,
end-code

code >CFA ( nt -- xt )
  1 # tos [+] r0 ldr,  \ Get the length word
  2 # tos        add,  \ Skip over the link pointer and length word.
  mask_len    r1 load, \ Get the length mask into r1
  r1 r0       r0 and,  \ Mask it to get the real length.
  r0 tos     tos add,  \ And advance TOS that far.
end-code


\ MOVEs ======================================================================
code MOVE< ( src dst u -- ) \ Copies from low addresses to high.
label (MOVE<)
  \ Length is in TOS
  {{ r1 r0 }} pop, \ r1 is source, r0 is dest

  0 # tos cmp,
  fwd b, \ Jump ahead to the loop tail, in case length is 0.

  label MOVE<-loop
    1 # r1 []+ r2 ldr,
    1 # r0 []+ r2 str,
    1 # tos sub,
    resolve
    MOVE<-loop bne, \ Loop until it's 0

  \ Pop a new TOS
  {{ tos }} pop,
end-code

code MOVE> ( src dst u -- ) \ Copies from high addresses to low.
label (MOVE>)
  \ Length is in TOS
  {{ r1 r0 }} pop, \ r1 is source, r0 is dest

  \ There's no ldr/str with decrement; so use the count as a register index.
  \ That costs 2 cycles but I think it's still the fastest way.
  0 # tos cmp,
  fwd beq, \ Jump ahead to the end if the length is 0.

  label MOVE>-loop
    1 # tos sub,
    tos r1 [+] r2 ldr,
    tos r0 [+] r2 str,
    0 # tos cmp,
    MOVE>-loop bne, \ Loop until it's 0

  \ Pop a new TOS
  resolve
  {{ tos }} pop,
end-code


code (DO) ( limit index --   R: -- limit index )
  {{ r0 }} pop, \ limit -> r0
  r0  pushrsp,
  tos pushrsp,
  {{ tos }} pop, \ replace TOS
end-code

code (LOOP-END) ( delta -- done?   R: limit index -- limit index2 )
  rsp     []  r3 ldr,     \ index -> r3
  1 # rsp [+] r4 ldr,     \ limit -> r4
  r4 r3 r2       sub,     \ i-l   -> r2
  \ TOS has the delta.
  r2 tos      r0 add,     \ delta + index - limit -> r0
  0 #         r1 mov,     \ first flag defaults to false
  r2 r0       r0 xor,     \ d+i-l ^ i-l -> r0
  fwd bmi,                \ Jump if the top bit is set, ie. different.
    1 # r1 neg,           \ first flag is true if they're different.
  resolve
  r1 r0 mov,              \ Keep that first flag in r0.

  \ Then calculate delta XOR index - limit
  0 #    r1 mov,
  tos r2 r2 xor,
  fwd bmi,
    1 # r1 neg,
  resolve

  tos r3 r3  add,          \ delta + index -> r3, the new index.
  rsp [] r3  str,          \ Write that out.
  r1  r0 r0  orr,          \ OR the two flags
  r0     tos mvn,          \ and invert the result, into TOS as done? flag
end-code

code UNLOOP ( --   R: limit index -- )
  2 # rsp add,
end-code

code I ( -- index   R: index -- index )
  {{ tos }}  push,
  rsp [] tos ldr,
end-code

code J ( -- index1   R: index1 limit2 index2 -- index1 limit2 index2 )
  {{ tos }} push,
  2 # rsp [+] tos ldr,
end-code



\ Hardware interface =========================================================
code #DEVICES ( -- n )
  {{ tos }} push,
  tos hwn,
end-code

code DEVINFO ( dev-num -- version d-MAKER d-ID )
  tos hwq,
  \ Unfortunately these 32-bit values are in the wrong order for pushing in one
  \ instruction.
  {{ r2 }} push,    \ version
  {{ r3 }} push,    \ maker lo
  {{ r4 r0 }} push, \ maker hi and ID lo
  r1 tos mov,       \ ID hi in tos
end-code

\ Sends a hardware interrupt in DCPU style.
\ The stack before and after has the register values ordered
\ ( r0 .. r6 mask dev-num -- r0 .. r6 ) but only the ones in the mask are
\ included on either side. Note that r7 is excluded because it's used for the
\ HWI itself.
\ The mask has r0 as bit 0, r6 as bit 6. The low half is input, the high half
\ output.
\ NOT REENTRANT because of the saving here.
\ Saves the device, IP, mask and RSP in that order.
label >DEVICE-saved 0 asm, 0 asm, 0 asm, 0 asm,

code >DEVICE
  ifc,                   \ Disable interrupts during this messy save process.
  >DEVICE-saved r0 load,
      r0 []  tos str,    \ Save the device number.
  1 # r0 [+] ip  str,    \ Save IP
  {{ r1 }} pop,          \ Get the mask
  2 # r0 [+] r1  str,    \ And save it too.
  3 # r0 [+] rsp str,    \ Finally save RSP

  \ Now start popping things based on the mask.
  \ We keep the mask in r1 for now, and then switch it for the latter half.
  r1 r7 mov,    \ Keep the mask in r7 for now.
  $40 # r0 mov, \ And a marker in r0.
  r0 r7 tst,   fwd beq,   {{ r6 }} pop,    resolve   1 # r0 lsr,
  r0 r7 tst,   fwd beq,   {{ r5 }} pop,    resolve   1 # r0 lsr,
  r0 r7 tst,   fwd beq,   {{ r4 }} pop,    resolve   1 # r0 lsr,
  r0 r7 tst,   fwd beq,   {{ r3 }} pop,    resolve   1 # r0 lsr,
  r0 r7 tst,   fwd beq,   {{ r2 }} pop,    resolve   1 # r0 lsr,
  r0 r7 tst,   fwd beq,   {{ r1 }} pop,    resolve   1 # r0 lsr,
  r0 r7 tst,   fwd beq,   {{ r0 }} pop,    resolve \ Skip the shift now.

  \ Now r0-r6 are (a) popped and (b) loaded per the mask. The mask is in r7 but
  \ also saved. Read the device number into r7 for the HWI call.
  >DEVICE-saved r7 load,
  r7 [] r7 ldr,
  r7 hwi,

  \ Now we need to restore the results.
  >DEVICE-saved r7 load,
  r7 []         r6 str,  \ Store the r6 value over top the device number!
  2 # r7 [+]    r7 ldr,  \ Mask back in r7
  $0100 r6 load,         \ Get our marker into r6, from the bottom this time.
  r6 r7 tst,   fwd beq,   {{ r0 }} push,   resolve   1 # r6 lsl,
  r6 r7 tst,   fwd beq,   {{ r1 }} push,   resolve   1 # r6 lsl,
  r6 r7 tst,   fwd beq,   {{ r2 }} push,   resolve   1 # r6 lsl,
  r6 r7 tst,   fwd beq,   {{ r3 }} push,   resolve   1 # r6 lsl,
  r6 r7 tst,   fwd beq,   {{ r4 }} push,   resolve   1 # r6 lsl,
  r6 r7 tst,   fwd beq,   {{ r5 }} push,   resolve   1 # r6 lsl,

  >DEVICE-saved r0 load,
  r6 r7 tst,
  fwd beq,
    \ r6 is special because it's saved to memory. Bring it back and push it.
    r0 [] r6 ldr,
    {{ r6 }} push,
  resolve

  \ r0 is the saved area
  1 # r0 [+] ip  ldr,
  3 # r0 [+] rsp ldr,
  {{ tos }} pop, \ Get the top of stack back into TOS.
  ifs,           \ And re-enable interrupts
end-code



\ The above >DEVICE is pretty expensive, which is fine for occasional HWIs
\ like setting up the LEM1802 memory maps, but is really bad for reading the
\ keyboard. Thus (KEY) is separately coded to get the next key typed.
code (KEY) ( dev-num -- key )
label (key)-loop
  1 # r0 mov, \ Read next key
  tos hwi,
  0 # r2 cmp,
  (key)-loop beq, \ Keep going while it's 0.

  r2 tos mov,     \ Put the key from r2 into TOS.
end-code

\ TODO interrupt handling? The current system doesn't actually use them.
label interrupt-handler
  brk, \ Just a brk, we're not really handling these.

interrupt-handler 9 t! \ Overwrite the branch target in the interrupt vector.


\ Main =======================================================================
\ Machine code entry point, jumped to be the first instructions.
label main
  ifc,
  rp0 rsp load,
  sp0 r0  load,
  {{ r0 }} push, \ This sequence...
  popsp,         \ is pretending...
  {{ tos }} pop, \ it's sp! - which pops the TOS register from the stack!

  entry-point r0 load, \ entry-point is a variable holding an xt.
  r0 [] r0 ldr,        \ the xt itself is now in r0.
  EXECUTE-tail b,      \ jump to EXECUTE's innards.

\ Overwrite the branch target of the reset vector at $0000.
main 1 t!

