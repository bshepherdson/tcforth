\ Target words to get metacompiled, that hide the details of the machine and the
\ Forth model (eg. ITC vs. DTC vs. STC)
\ This file: ITC on the Risque-16.

\ ,DOCOL is already defined.
target definitions

\ Add !CF and ,CF, which expects the address of the codeword on the stack,
\ and store or compile it respectively.
\ For ITC these are simply ! and , to compile the target address.
target : !CF ( codeword-addr xt -- ) ! ;
target : ,CF ( codeword-addr -- ) , ;

\ Write the code field for a colon definition.
\ In ITC this means the address of DOCOL.
target : ,DOCOL ( -- ) [ host docol tliteral target ] ,CF ;

target : PAD ( -- addr ) $fb00 ;

host REQUIRE ../shared/model-target.ft

\ DOES> ======================================================================
\ Implementing sequence 2
\ (DOES>) runs in eg. CONSTANT to properly compile a particular constant.
\ Inside target (DOES>), TORS points at the EXIT. Just after it is the
\ dodoes-code that should become the new codeword.
\ This is easy in ITC.
\ Runs during compilation TARGET : DOES> - compile code into its thread!
host definitions

\ Moves THERE back by u and pushes the most recently compiled words onto the
\ stack (low address first).
: asm-lit ( u -- w ... )
  dup negate code-space +!   0 DO code-space @ i + tcode@ LOOP ;

\ Compiles code that will itself compile an exit.
\ Runs while assembling ; for example.
: EXIT-compile, ( -- )
  'EXIT @ tliteral   [T'] compile, tcompile, ;

code-space @
pfa->tos,
code-space @
CONSTANT pfa-tos-code-top
CONSTANT pfa-tos-code


: TDOES,
  [T'] (DOES>) tliteral  [T'] compile, tcompile,
  [T'] EXIT    tliteral  [T'] compile, tcompile,

  pfa-tos-code-top pfa-tos-code DO
    i tcode@ tliteral   [T'] , tcompile,
  1 tcells +LOOP

  [ 2 # pc r0 add,  1 asm-lit tliteral          ] [T'] , tcompile,
  [ docol b,        2 asm-lit tliteral tliteral ] [T'] , dup tcompile, tcompile,
;


\ Debugging helpers ==========================================================
host definitions
: codeword+ ( xt -- tt ) tcell+ ;
: ?tsee-lit    ( tt -- tt 0 | tt' -1 )
  dup tcode@ lit = IF
    tcell+ dup tcode@ dup . hex.   tcell+ true
  ELSE false THEN ;

: ?tsee-branch ( tt -- tt 0 | tt' val -1 )
  dup tcode@ dup [T'] (0branch) =   swap [T'] (branch) = or IF
    dup tcode@ T>NAME TID. bl emit
    tcell+ dup tcode@ hex. tcell+ true ELSE false THEN ;

: tsee-end? ( tt -- ? )   tcode@ [T'] EXIT = ;
: tsee-word ( tt -- tt' ) dup tcode@ t>name tid. tcell+ ;
