\ Threading model ============================================================
\ ITC with TOS in register.
\ An xt thus is not a pointer to code, but a pointer to a pointer to code!

host definitions

\ Some basic constants
0     CONSTANT rp0
$ff7f CONSTANT sp0 \ This is the value to literally write to SP for an empty stack.

code-space CONSTANT DP
: here dp @ ;
0 dp !

\ Registers ==================================================================
\ SP is data stack pointer
\ r7 is return stack pointer
\ r6 is IP
\ r5 is TOS
\ r0-r4 are free

: rsp r7 ;
: ip  r6 ;
: tos r5 ;

\ Assembler macros
: next,  ( -- )
  1 # ip []+ r0 ldr,
  1 # r0 []+ r1 ldr,  \ r0 is adjusted to point after the code field address!
  r1 bx, ;
3 CONSTANT next-len

: pushrsp, ( d-rhs -- ) 2>R   1 # rsp sub,   rsp [] 2R> str, ;
: poprsp,  ( d-lhs -- ) 2>R {{ 2R> }} rsp ldmia, ;

\ Pushes a literal in code, after saving TOS to memory.
: lit,   ( value -- )
  {{ tos }} push,
  ( value ) tos load, ;

: tcompile,  ( xt -- )      tcode, ;
: tdecompile ( slot -- xt ) tcode@ ;


VARIABLE 'latest
: LATEST ( -- nt ) 'latest @ ;
0 'latest !


\ Starting the assembly ======================================================
\ At the top of memory on the Risque-16 are the reset and interrupt vectors.
0 code-space !
$8000 b, \ Dummy long branch; will get rewritten with main.

8 code-space !
$8000 b, \ Dummy long branch; will get rewritten with the interrupt handler.

\ Code words =================================================================
label DOCOL
  \ r0 holds the parameter field address, ie. the IP for this thread.
  ip pushrsp,
  r0 ip mov,
  next,

\ DOVAR is the code word for a CREATEd definition without a DOES> - r0 contains
\ the parameter field address. With colocated code and data, that needs to be
\ moved to tos. With separate, it needs to be a memory read.
\ See the DOES> design below for more details.
config data-indirect? @ [IF]
: pfa->tos, ( -- )
  {{ tos }} push,
  r0 [] tos ldr, ;
[ELSE]
: pfa->tos, ( -- )
  {{ tos }} push,
  r0 tos mov, ;
[THEN]


\ This is the code word for CREATEd words by default.
\ r0 holds the parameter field address; it needs to be pushed.
\ (DOES>) rewrites the code word to point at the dodoes-code, see below.
label DOVAR
  pfa->tos,
  next,

\ Pseudo code word for literals in the stream.
label LIT 0 asm,
label (LIT)
  {{ tos }} push,
  1 # ip []+ tos ldr,
  next,
(LIT) LIT tcode!

label DOSTRING  0 asm,
label (DOSTRING)
  \ Next word is the length, then followed by that many characters.
  {{ tos }} push,     \ Push old TOS
  1 # ip []+ tos ldr, \ Length in TOS
  {{ ip }} push,      \ IP points at the start of the string now, push it.
  tos ip ip add,      \ Bump IP past the string.
  next,
(DOSTRING) DOSTRING tcode!

\ DOES> ======================================================================
\ This is different from the original TC-Forth DODOES scheme.
\ Sequence 1: while eg. : CONSTANT create , DOES> @ ; is being defined.
\ Sequence 2: while CONSTANT is running, defining a new constant.
\ Sequence 3: while a particular constant is executing.

\ DOES> is an immediate word, it runs during "Sequence 1".
\ It compiles   (DOES>) EXIT dodoes-code   at the end of CONSTANT.
\ Then the Forth code after DOES> is compiled. The final CONSTANT looks like:
\ link | len | CONSTANT | docol | CREATE | , | (DOES>) | EXIT |
\     dodoes-code... | @ | EXIT

\ Sequence 2 (eg. 7 CONSTANT FOO) CREATEs the new header with the default
\ DOVAR as its code word, but then (DOES>) runs and patches it to be the address
\ of dodoes-code above, ie. after the EXIT:
\ link | len | FOO | &dodoes-code | 7

\ In ITC, the dodoes-code is entered with the parameter field (pointer to 7)
\ in r0. The dodoes-code makes that TOS, then sets r0 to the following thread
\ and jumps to DOCOL! DOCOL pushes the old IP, makes this thread the new one,
\ and executes it, returning to whoever called FOO.
\ ADD ip, PC, #imm makes it easy to aim the IP at the following thread.

\ This HOST word is invoked by Host-side DOES> to compile the necessary pieces.
VARIABLE '(DOES>)
VARIABLE 'EXIT   \ These get populated later.

: EXIT, ( -- ) 'EXIT @ tcompile, ;

: DOES, ( -- 'dodoes-code )
  '(DOES>) @ tcode,   'EXIT @ tcode,
  here
  \ On entering here, r0 is the parameter field address, and the thread follows
  \ after this code.
  pfa->tos,
  2 # pc r0 add,  \ PC+2 -> r0 - that points AFTER the following (long) branch.
  docol b,
  \ That's 5 words, 5 cycles, plus DOCOL. Unfortunately fairly bulky.
;


\ Dictionary headers =========================================================
\ Compiles the code field for a colon definition.
\ In ITC this is the address of DOCOL.
: ,docol ( -- ) docol tcode, ;

\ Compiles the code field for a CREATEd word.
: ,dovar ( -- ) dovar tcode, ;

\ Compiles a string literal into the thread.
\ In ITC/DTC that's DOSTRING, then the length, then the chars.
: ,dostring ( c-addr u -- )
  dostring tcompile,
  dup tcode-c,
  ( c-addr u ) BEGIN ?dup WHILE 1- >R   dup c@ tcode-c,   1+ R> REPEAT drop ;

\ Overwrites the code word of the word at word-xt to point to does-addr.
\ That's just a store for ITC.
: !dodoes ( dodoes-code word-xt -- ) tcode! ;

\ Compile a literal. This is in the model because eg. STC handles this very
\ differently.
: tliteral ( x --   X: -- x ) lit tcompile,   tcode, ;

: t>pfa ( target-xt -- target-body ) tcell+ ;

label entry-point 0 asm,


\ Space for : and ; ==========================================================
\ : :   (CREATE) ,docol smudge ] exit    5 cells and the codeword
: allot-: ( -- ) 6 tcells tcode-allot ;
\ : ;   EXIT-compile, smudge [ exit
\ EXIT-compile, pushes: lit + xt + compile, = 3, plus smuge [ exit for 6, plus the codeword = 7
: allot-; ( -- ) 7 tcells tcode-allot ;
