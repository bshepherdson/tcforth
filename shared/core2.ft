\ Advanced core words, loaded post-input.
target definitions

: HEX 16 base ! ;
: DECIMAL 10 base ! ;

\ (CREATE) builds a blank header, no code field.
\ link | len | name... |
target : (CREATE) ( "name" -- ) here latest ,   'latest !
    parse-name dup c,
    here swap ( src dst u ) dup >R move> R> ( len ) allot ;

host definitions
\ Host-side CREATE, used by eg. : CONSTANT ... HOST ACTS: CREATE ... ;
: CREATE ( "name" --    X: -- addr ) (tcreate) ,dovar ;
target definitions

target : CREATE ( "name" --     X: -- addr )
    (CREATE) [ host dovar tliteral target ] ,cf ;
  host acts: create ;


\ DOES> Design ===============================================================
\ There are 6 sequences of code that matter here:
\ Sequence 1a: Target : CONSTANT
\ Sequence 1b: Host ACTS: for same
\ Sequence 2a: Target exec of 3 CONSTANT pi
\ Sequence 2b: Host exec of 3 CONSTANT pi
\ Sequence 3a: Target exec of pi
\ Sequence 3b: Host exec of pi

\ Sequence 1:
\ TARGET DOES> is IMMEDIATE/IMPERATIVE.
\ a. On the target, it compiles (DOES>) | EXIT | dodoes-code into the dictionary
\ b. On the host, it compiles the same into the target, but then:
\    - Compiles LIT mirror-CONSTANT | (DOES>) | EXIT into the host action.
\    - Captures the target xt of the dodoes-code in mirror-CONSTANT slot 4.
\    - Uses VARIABLE doing? and HOST ; to capture the xt for the Host-side DOES>
\      action, saving it in slot 3 of mirror-CONSTANT.

\ Sequence 2:
\ a. TARGET (DOES>) uses its TORS (points to EXIT) to find the pointer to
\    dodoes-code and edit the code field to be JSR 'dodoes-code
\ b. HOST (DOES>) has mirror-CONSTANT pushed on the stack!
\    - Get target xt for DOES> code from it, and set target code field.
\    - Get host xt for DOES> code as well, and set the interp-xt for mirror-PI.

\ HOST (DOES>) runs when eg. CONSTANT is called interpretively (sequence 2) and
\ does two things:
\ 1. Mimic TARGET (DOES>)
\   Update the code field of the new Target word (xt in mirror word slot 0) to
\   be the Target DOES> address (slot 4).
\ 2. Change mirror interp-xt for the mirror word to be the Host DOES> xt.
\   That's stored in the mirror word's slot 3.

\ Sequence 3:
\ On the target - just works.
\ On the host, its compile and interp xts are set properly!


\ (DOES>) - implementing sequence 2 ==========================================
\ These depend on the model and machine, so they are expected to be defined in
\ the machine-specific code (eg. in model.ft and model-target.ft).

\ On the host, mimic the target (DOES>). On the host side, the mirror body for
\ our defining word (eg. CONSTANT) is on the stack - it contains the target-xt
\ for the DOES> code, as well as the host-xt for the host's DOES> code!
host definitions
: (DOES>) ( mirror-CONSTANT -- )
  \ Step 1: Change the target code field to point to the does-code
  \ which is found in mirror-CONSTANT's t-does field.
  \ t-does is 0 for CREATEd words without TARGET DOES>, eg. VARIABLE.
  dup mirror>t-does @   ?dup IF 'mirror @ mirror>txt @   !dodoes THEN  ( mirror-CONSTANT )
  \ Step 2: Change the newest 'mirror word's interp-xt to mirror-CONSTANT's
  \ h-does field.
  mirror>h-does @   'mirror @ mirror>interp ! ( ) ;

target definitions


\ DOES> - implementing sequence 1 ============================================
\ Target side: Compiles (DOES>) | EXIT | dodoes-code into the definition; saves
\ the dodoes-code address into the mirror word's t-does field.
\ Host side: Compiles the same into the target, but also compiles
\ LIT mirror-CONSTANT | (DOES>) | EXIT on the host.
\ Use the acting? and doing? flags in HOST ; to define the interp-xt (current
\ :noname) and target-does-xt (about to be started) actions.
target : DOES> ( -- )
    [ host TDOES, target ]
    ; IMMEDIATE
  host acts: does,   'mirror @ mirror>t-does ! ; IMPERATIVE
  \ This is just the Target side; it saves the target xt of target DOES> code
  \ Any defining word (eg. CONSTANT) with a Host action should have its own
  \ host acts: ... DOES> ... ; clause and that's when HOST DOES> below runs!

\ This is IMMEDIATE on the host and runs during compilation of the HOST ACTS:

host definitions
: DOES> ( -- )
  \ Compile LIT mirror-CONSTANT | (DOES>) | EXIT into the current Host word.
  'mirror @   postpone literal
  ['] (DOES>) compile,
  postpone ; \ This does the acting? logic: set the Host interp-xt for CONSTANT
  \ Next, start a new :noname and set doing? so the trailing HOST ; will put the
  \ xt into the h-does field of CONSTANT.
  doing? on :noname
  \ By default our new definition will get its mirror body from >mirror, look
  \ up the target xt, and convert to a target body. We compile code into the new
  \ nameless definition here so that the user-facing HOST ACTS: ... DOES> ... ;
  \ expects ( target-body ) on the stack as normal.
  ['] >mirror compile,    ['] @ compile, ( mirror-body )
  ['] mirror>txt compile, ['] @ compile, ( target-xt )
  ['] t>body compile,                    ( target-body )
  \ Now we're ready to continue compiling the tail of the definition.
; IMMEDIATE

target definitions


\ Now we're ready to define the various defining words in the core!
target : VARIABLE ( "name" --     X: -- addr ) CREATE 0 , ;
  host acts: create host 0 t,   DOES> ;
  \ Empty DOES> action, but that leaves the target-body on the stack.

target : CONSTANT ( x "name" --    X: -- x ) CREATE , DOES> @ ;
  host acts: create t, DOES> t@ ;

\ host cr cr hex
\ .s cr
\ (T') CONSTANT
\ ." CONSTANT mirror: " dup                       hex. cr
\ ."   target xt:     " dup mirror>txt     @      hex. cr
\ ."   interp-xt:     " dup mirror>interp  @      hex. cr
\ ."   compile-xt:    " dup mirror>compile @      hex. cr
\ ."   h-does:        " dup mirror>h-does  @      hex. cr
\ ."   t-does:        " dup mirror>t-does  @      hex. cr
\ 
\ dup mirror>interp  @ xt-see cr
\ dup mirror>compile @ xt-see cr
\ drop
\ .s
\ decimal cr cr

target : ['] ( C: "name" --    X: -- xt )
    parse-name (find) drop postpone literal ; IMMEDIATE
  host acts: T' tliteral ; IMPERATIVE


\ DO LOOPs ===================================================================
target VARIABLE (loop-top)

target : DO ( m i -- )
    ['] (DO) compile,   1 postpone literal
    [0BRANCH] here 0 , ( C: new-loop-top )
    (loop-top) @ swap (loop-top) !  ( C: old-jump-addr )
    ; IMMEDIATE
  host acts:
    [T'] (DO) tcompile,   1 tliteral   T0BRANCH tcompile,  here 0 t,
    [T'] (loop-top) t>body >R  ( top-slot   R: 'loop-top )
    R@ t@ swap ( old-top top-slot   R: 'loop-top ) R> t!  ( old-top )
    ; IMPERATIVE


host definitions
: (+LOOP)
  [T'] (loop-end) tcompile,   T0BRANCH tcompile,
  \ Now we want to ,dest compile the top address, which is a tcell after the
  \ location in (loop-top).
  [T'] (loop-top) t>body dup >R   t@ tcell+   ,dest   ( old-top  R: 'top)
  \ Now HERE is after the bottom of the loop, and should be put with !dest
  \ at (loop-top).
  here R@ t@ !dest
  \ Finally, put the old-top back into (loop-top).
  R> t!
  [T'] unloop tcompile, ;

target definitions

target : +LOOP ( step --   C: old-jump-addr )
    ['] (loop-end) compile,   [0branch] here 0 , ( old-top bottom )
    (loop-top) @ cell+   ( old-top bottom top-target ) swap !dest ( old-top )
    \ End of the loop, start of the postlude
    here (loop-top) @ ( C: old-jump-addr end-addr top-slot )
    swap !dest        ( C: old-jump-addr )
    (loop-top) !      ( C: )
    ['] unloop compile, ; IMMEDIATE
  host acts: (+LOOP) ; IMPERATIVE

target : LOOP   1 postpone literal   postpone +LOOP ; IMMEDIATE
  host acts: 1 tliteral   (+LOOP) ; IMPERATIVE

\ LEAVE compiles code that will jump out of the innermost loop.
\ (loop-top) contains the address of its jump slot - this slides it back a tcell
\ to the 0branch itself, pushes a 0 so it'll branch, and branches there.
\ Note that the UNLOOP is after the top branch's target, so it'll handle
\ removing those parameters.
target : LEAVE ( --    R: loop-sys --   C: -- )
    (loop-top) @ 1 cells -
    0   postpone literal
    [branch] ,dest ; IMMEDIATE
  host acts:
    [T'] (loop-top) t>body t@ 1 tcells -
    0 tliteral TBRANCH tcompile, ,dest ; IMPERATIVE

\ Miscellany =================================================================
target : FILL ( c-addr u ch -- )
  -rot ( ch c-addr u ) dup 0 <= IF drop 2drop EXIT THEN
  over + swap ( ch top bottom ) DO dup i c! LOOP drop ;

target : ERASE ( c-addr u -- ) 0 fill ;

target : MIN ( x y -- max ) 2dup > IF swap THEN drop ;
target : MAX ( x y -- max ) 2dup < IF swap THEN drop ;

\ Recurse is tricky. It's an immediate word that uses latest at runtime.
\ On the host, it's similar, since HOST LATEST exists.
target : RECURSE ( -- ) latest >cfa compile, ; IMMEDIATE
  host acts: latest t>cfa tcompile, ; IMPERATIVE

target : PICK ( ... n -- ... nth ) 1+ cells sp@ + @ ;

target : ABS ( n -- u ) dup 0< IF negate THEN ;

target : FALSE ( -- false? )  0 ;
target : TRUE  ( -- true? )  -1 ;


\ Colon definitions ==========================================================
\ Target : and ; are empty placeholders right now. These need to be filled in
\ properly now that all the necessary words are defined.
\ : is   (CREATE) ,docol smudge ] EXIT
\ ; is   LIT EXIT   COMPILE,   smudge   postpone [   EXIT

target : SMUDGE ( -- )
  latest cell+ dup c@
  [ host f_hidden tliteral target ] xor
  swap c! ;


host dp @ \ Save the old dp
T' :
( old-dp t-xt ) dp ! \ Pretend we're compiling there.
,docol
T' (CREATE) tcompile,
T' ,docol   tcompile,
T' smudge   tcompile,
T' ]        tcompile,
T' EXIT     tcompile,
\ That's 6 cells with a 1-cell DOCOL.


T' ;
( old-dp t-xt )
\ First make it immediate; the length is 2 cells back. DCPU-specific!
\ dup 2 tcells -   dup t@ f_immed or swap t!
( old-dp t-xt ) dp !    \ Pretend we're compiling at semicolon
,docol
T' EXIT tliteral \ NB That's two cells wide
T' compile, tcompile,
T' smudge   tcompile,
T' [        tcompile,
T' EXIT     tcompile,
\ That's 7 cells with a 1-cell DOCOL.

( old-dp ) dp !


\ Signed long division =======================================================
target definitions
VARIABLE -dvd?
VARIABLE -dvs?

\ 2's complement negation: bitwise invert, then add 1.
: DNEGATE ( d -- -d ) invert >R invert R>   1 S>D D+ ;

: (div-diff) -dvd? @ -dvs? @ xor ;
: (DIV-CORE) ( d n -- ur uq )
     dup 0< dup -dvs? ! IF negate THEN  ( d u )
  >R dup 0< dup -dvd? ! IF dnegate THEN ( ud    R: u )
  R> um/mod ;

\ Symmetric division is simpler: the remainder has the same sign of the
\ dividend, or is zero. Quotient carries the main sign.
: SM/REM ( d n -- r q )
  (div-core) ( ur uq )
  -dvd? @ IF >R negate R> THEN ( r uq )
  (div-diff) IF negate THEN ( r q ) ;

\ Floored division is somewhat odder. The remainder has the sign of the divisor
\ (or is 0), while the quotient has the combined sign. When the signs do differ,
\ add 1 to the unsigned results before doing the negation.
: FM/MOD ( d n -- r q )
  (div-core) ( ur uq )
  over (div-diff) and IF 1+ swap 1+ swap THEN ( ur' uq' )
  (div-diff) IF negate THEN    \ Negate quotient when signs differ.
  -dvs? @ IF >R negate R> THEN \ Negate the remainder if divisor is negative.
;

target : M*    ( n1 n2 -- n3 )    >R S>D R> UDM* D>S ;
target : */MOD ( n1 n2 n3 -- n4 ) >R M* R> sm/rem ;
target : */    ( n1 n2 n3 -- n4 ) */MOD nip ;

target : :noname ( C: -- xt ) here ,docol postpone ] ;
  host acts: here ,docol   postpone target meta] ;

