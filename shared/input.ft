\ The fundamental stack is:
\ INTERPRET does the fundamental loop: BEGIN interpret... REFILL not UNTIL
\ QUIT clears return stack (only), sets up keyboard input, and calls INTERPRET.
\ COLD clears data stack and calls QUIT.

\ The return stack is used as the input source stack as needed.
\ - EVALUATE pushes the old 'SOURCE and >IN to the return stack and puts the
\   string in their place, then calls INTERPRET. It restores when done.
\   - S" QUIT" EVALUATE works correctly - the old inputs are thrown away!
\ - REQUIRED and friends also work: they stack the current source, set up the
\   file as the new source, and INTERPRET it.
\ 'SOURCE 'SOURCE-ID TIB >IN are already defined in the kernel.
target definitions
target : SOURCE    'SOURCE    2@ ;
target : SOURCE-ID 'SOURCE-ID  @ ;

target : >UPPER ( ch1 -- ch2 )
  dup [ host 'a' tliteral 'z' 1+ tliteral target ] within IF 32 - THEN ;

target : istr= ( ca1 u1 ca2 u2 -- ? )
  rot over <> IF drop 2drop 0 EXIT THEN \ Length mismatch
  ( ca1 ca2 u ) BEGIN ?dup WHILE
    >R
    over c@ >upper over c@ >upper <> IF
      2drop R> drop 0 EXIT THEN \ Character mismatch
    1+ >R 1+ R> R> 1- ( ca1' ca2' u' )
  REPEAT 2drop -1 ;

\ Internal formulation of FIND with a stacked string, not a counted string.
\ Returns 1 for IMMEDIATE words, -1 for regular words, 0 for not found.
target : (FIND) ( c-addr u -- 0 | xt 1 | xt -1 )
  latest >R BEGIN R@ WHILE ( c-addr u   R: nt )
    R@ cell+ dup char+ swap c@
    [ host mask_len_hidden tliteral target ] and ( ta tu wa wu )
    2over istr= ( ta tu eq? ) IF \ Found the match!
      2drop R@ >cfa   R> cell+ c@
      [ host f_immed tliteral target ] and IF 1 ELSE -1 THEN EXIT
    ELSE \ No match, so continue
      R> @ >R
    THEN
  REPEAT 2drop R> drop 0 ;

target : FIND ( c-addr -- c-addr 0 | xt 1 | xt -1 )
  dup >R   count (find)   dup IF R> drop ELSE drop R> 0 THEN ;


target : /STRING ( c-addr u n -- c-addr2 u2 ) tuck - >R   + R> ;

target : PARSE ( delim "...<delim>" -- c-addr u )
  source >IN @ /string   over >R   rot >R ( c-addr u   R: start delim )
  BEGIN dup WHILE
    over c@ R@ = IF \ End of string
      R> 2drop ( end   R: start ) R> tuck - ( start len )
      \ Advance >IN by len+1 since len excludes the delimiter.
      dup 1+ >IN +!
      EXIT THEN
    1 /string
  REPEAT ( c-addr 0   R: start delim )
  1000 >IN +! R> R> 2drop ;

target : SKIP-SPACES ( -- )
  BEGIN source >in @ /string WHILE \ Not empty  ( c-addr )
    c@ bl <> IF EXIT THEN
    1 >IN +!
  REPEAT drop ;

target : SKIP-NON-SPACES ( -- )
  BEGIN source >in @ /string WHILE \ Not empty  ( c-addr )
    c@ bl = IF EXIT THEN
    1 >IN +!
  REPEAT drop ;

target : PARSE-NAME ( "<spaces>name<space>" -- c-addr u )
  skip-spaces
  source drop     >IN @ ( src start )
  skip-non-spaces >IN @ ( src start end )

  \ Bump the input pointer to after the space, unless at end-of-line.
  source >in @ /string IF 1 >IN +! THEN drop
  over -                ( src start len )
  >R + R> ;


target : ' ( "name" -- xt ) parse-name (find) 0= IF err-undefined throw THEN ;
  host acts: T' ;

target : POSTPONE ( "name" -- ) ' compile, ; IMMEDIATE
  host acts: T' tcompile, ; IMPERATIVE

target : ['] ( "name" --    X: -- xt )
    ' postpone literal ; IMMEDIATE
  host acts: T' tliteral ; IMPERATIVE


host REQUIRE case.ft
host REQUIRE strings.ft
target definitions


\ Basic, unsigned number parsing.
\ Tries to parse as many digits according to BASE as possible.
target : >NUMBER ( ud1 c-addr1 u1 -- ud2 c-addr2 u2 )
  BEGIN
    >R dup >R c@ ( ud1 ch )
    dup [ host '0' tliteral '9' 1+ tliteral target ] WITHIN IF
      [ host '0' tliteral target ] -
    ELSE
      dup [ host 'A' tliteral 'Z' 1+ tliteral target ] WITHIN IF
        [ host 'A' tliteral target ] -
      ELSE
        dup [ host 'a' tliteral 'z' 1+ tliteral target ] WITHIN IF
          [ host 'a' tliteral target ] -
        ELSE ( Bad digit! )
          drop 10000
        THEN
      THEN
      10 + \ A=10, not 0
    THEN ( ud1 digit )
    dup base @ U< IF \ Legal digit, merge it in.
      >R base @ UDM* ( ud*base ) R> S>D D+ ( ud*base+digit )
      R> R> 1 /string dup 0= IF ( ud1 c-addr u ) EXIT THEN
      \ If we're still here, we're set up to loop back.
    ELSE
      \ That digit was illegal. Return the un-advanced string.
      drop R> R> EXIT
    THEN ( ud c-addr u )
  AGAIN ;


\ Tries to parse a number, fully fancy, with - and $ prefixes.
target : ?NUMBER ( c-addr u -- n true | false )
  base @ >R   0 >R ( c-addr u    R: old-base neg? )
  over c@ [ host '-' tliteral target ] = IF R> drop -1 >R   1 /string THEN
  over c@ [ host '$' tliteral target ] = IF 16 base !       1 /string THEN
  0 0 2swap >number ( ud c-addr u ) 0= IF \ Parsed successfully!
    drop D>S   R> IF negate THEN   R> base !   -1
  ELSE \ Failed to parse
    drop 2drop R> drop R> base ! 0
  THEN ;

\ Interprets a single parsed word or number.
target : INTERP1   ( c-addr u -- )
  2dup last-parse 2!
  2dup (find) ?dup IF ( c-addr u xt 1|-1 )
    2swap 2drop ( xt 1|-1 )
    state @ IF
      0> IF execute ELSE compile, THEN
    ELSE
      drop execute
    THEN
  ELSE ( c-addr u )
    ?number ( n true | false ) IF ( n )
      state @ IF [ host t' literal tcompile, target ] THEN
    ELSE ( )
      \ Really undefined. Emit an error message.
      err-undefined throw
    THEN
  THEN ;

\ Fundamental single-line interpreter loop.
target : INTERPRET ( -- )
  BEGIN parse-name dup WHILE interp1 REPEAT 2drop ;

target : ABORTED ( -- )
  R> [ host rp0 tliteral target ] rp! >R \ Drops everything but ABORTED's own return
  [ host T' [ tcompile, target ]
  0 'source-id !             \ Force a keyboard source.
  [ host sp0 tliteral target ] sp! ;

host presume ACCEPT presume EMIT presume REVERSE
target
