target definitions

\ Basic output helpers =======================================================
: SPACE  ( -- )   bl emit ;
: SPACES ( u -- ) ?dup IF 0 DO space LOOP THEN ;

: TYPE   ( c-addr u -- ) ?dup IF 0 DO ( c-addr ) dup c@ emit 1+ LOOP THEN drop ;

\ Pictured numeric ouput =====================================================
VARIABLE (picout)
: (picout-top) here 64 chars + ;
: <#   ( -- )    (picout-top) (picout) ! ;
: HOLD ( c -- )  (picout) @ 1- dup >R c!   R> (picout) ! ;
: SIGN ( n -- )  0< IF [ host '-' tliteral target ] hold THEN ;
: #    ( ud1 -- ud2 )
  dup 0 base @ um/mod >R drop ( ud1   R: hi-q )
  base @ um/mod               ( r lo-q   R: hi-q )
  swap dup 10 < IF
    [ host '0' tliteral target ]
  ELSE
    10 - [ host 'A' tliteral target ]
  THEN
  + HOLD ( lo-q   R: hi-q )
  R> ;

: #S   ( ud1 -- ud2 )
  2dup or 0= IF [ host '0' tliteral target ] hold EXIT THEN \ Special case 0
  BEGIN 2dup or WHILE # REPEAT ;

: #>   ( ud -- c-addr u ) 2drop   (picout) @ (picout-top) over - ;

: (#UHOLD) ( u -- c-addr u ) <# 0 #S #> ;
: U. ( u -- ) (#UHOLD) type space ;

: (#HOLD) ( n -- c-addr u )
  \ The smallest integer is a special case - it has no positive counterpart!
  [ host 1 tcellbits 1- lshift tliteral target ] over = IF
    <# 0 #S [ host '-' tliteral target ] hold #>
  ELSE <# dup abs S>D #S rot sign #> THEN ;

: .   (#HOLD) type space ;

: HEX. ( u -- )
  base @ >R hex
  [ host '$' tliteral target ] emit   U.
  R> base ! ;

\ Intro message ==============================================================
VARIABLE '.intro
:noname ." TC-Forth version 7" cr ; '.intro !

\ Stack output ===============================================================
VARIABLE (.)
: (.S) ( xt -- )
  [char] < emit depth (#HOLD) type [char] > emit space
  0 depth 1- DO i pick (.) @ execute -1 +LOOP ;

: .S    ( -- ) ['] .    (.) ! (.S) ;
: HEX.S ( -- ) ['] hex. (.) ! (.S) ;

