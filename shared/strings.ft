\ String handling, S" in interp and compile states, and ."
target definitions

target : CHAR   ( "<spaces>name" -- char ) parse-name drop c@ ;
  host acts: char ;
target : [CHAR] ( "<spaces>name" --    X: -- char )
    parse-name drop c@   postpone literal ; IMMEDIATE
  host acts: char tliteral ; IMPERATIVE

\ Following the standard, S" ." and .( are only supported in definitions.
host definitions
: (S")
  '"' parse
  ,dostring ;
target definitions

target : S" ( "ccc"" --     X: -- c-addr u )
    [ host '"' tliteral target ]
    parse ( c-addr u ) ,dostring ; IMMEDIATE
  host acts: (S") ; IMPERATIVE

\ Forward reference to TYPE, resolved later.
presume type

\ Indirection so this word can be compiled directly and its contents are the
\ forward reference.
\ TODO This kinda sucks - it's a metacompiler weakness with target-side impact.
\ Fix it so that forward references can work for values pushed as literals.
\ Doing that portably between ITC/DTC and STC is hard, though, since literals
\ are not just in the thread in that case.
target : <type> type ;

target : ." ( "ccc"" --   X: -- ) postpone S"  ['] <type> compile, ; IMMEDIATE
  host acts: (S")   [T'] <type> tcompile, ; IMPERATIVE

\ Compile-time print
target : .( ( "ccc<paren>" -- ) [char] ) parse type ; IMMEDIATE
  host acts: [char] ) parse type ; IMPERATIVE

